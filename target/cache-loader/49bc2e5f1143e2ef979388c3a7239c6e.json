{"remainingRequest":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-fichier\\import-fichier-detail.tsx","dependencies":[{"path":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-fichier\\import-fichier-detail.tsx","mtime":1563530778216},{"path":"C:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import './import-fichier-detail.scss';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Container, Progress } from 'reactstrap';\r\nimport { getEntityByHash, getEntityStatus } from './import-fichier.reducer';\r\nexport class ImportFichierDetail extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._checkStatus = () => {\r\n            this.props.getEntityStatus(this.props.match.params.id);\r\n            if (this.props.status.geolocStatut.isFinished &&\r\n                this.props.status.cleanStatut.isFinished &&\r\n                this.props.status.prospectStatut.isFinished) {\r\n                clearInterval(this.state.intervalStatutClientId);\r\n                setTimeout(() => this.props.history.push('/entity/import-fichier/' + this.props.hash + '/result'), 500);\r\n            }\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.props.getEntityByHash(this.props.match.params.id);\r\n        const inter = setInterval(() => this._checkStatus(), 1000);\r\n        this.setState({ intervalStatutClientId: inter });\r\n        this.props.getEntityStatus(this.props.match.params.id);\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.intervalStatutClientId);\r\n    }\r\n    render() {\r\n        const { status } = this.props;\r\n        return (React.createElement(Container, { body: true, className: \"text-center\" }, status.geolocStatut && (React.createElement(\"div\", null,\r\n            status.geolocStatut.isFinished && status.cleanStatut.isFinished && status.prospectStatut.isFinished ? (React.createElement(\"div\", { className: \"text-container\" },\r\n                React.createElement(\"div\", { className: \"text-animation\" },\r\n                    React.createElement(\"span\", null, \"Nettoyage termin\\u00E9\")))) : (React.createElement(\"div\", { className: \"spinner\" },\r\n                React.createElement(\"div\", { className: \"dot1\" }),\r\n                React.createElement(\"div\", { className: \"dot2\" }))),\r\n            React.createElement(\"div\", { className: \"text-center\" },\r\n                \"Traitement des lignes clients : \",\r\n                status.cleanStatut.nombreTraite || 0,\r\n                \" / \",\r\n                status.cleanStatut.nombreATraite),\r\n            React.createElement(Progress, { className: \"progress\", value: Math.round(((status.cleanStatut.nombreTraite || 0) * 100) / status.cleanStatut.nombreATraite), max: 100 }),\r\n            status.prospectStatut.isStarted && (React.createElement(\"div\", null,\r\n                React.createElement(\"div\", { className: \"text-center\" },\r\n                    \"Recherche de prospects autour de vos clients existants (\",\r\n                    status.prospectStatut.nombreTraite || 0,\r\n                    \" /\",\r\n                    ' ',\r\n                    status.prospectStatut.nombreATraite,\r\n                    \")\"),\r\n                React.createElement(Progress, { className: \"progress\", value: status.prospectStatut.nombreTraite, max: status.prospectStatut.nombreATraite })))))));\r\n    }\r\n}\r\nconst mapStateToProps = ({ importFichier }) => ({\r\n    importFichierEntity: importFichier.entity,\r\n    status: importFichier.status,\r\n    hash: importFichier.entity.hash\r\n});\r\nconst mapDispatchToProps = { getEntityByHash, getEntityStatus };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ImportFichierDetail);\r\n",{"version":3,"file":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-fichier\\import-fichier-detail.tsx","sourceRoot":"","sources":["C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-fichier\\import-fichier-detail.tsx"],"names":[],"mappings":"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","sourcesContent":["import './import-fichier-detail.scss';\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Container, Button, Progress, Table, Row, Col } from 'reactstrap';\r\nimport { Translate } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getEntityByHash, getEntityStatus } from './import-fichier.reducer';\r\n\r\nexport interface IImportFichierDetailProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\r\n\r\nexport interface IImportFichierDetailState {\r\n  intervalStatutClientId: any;\r\n  intervalStatutProspectId: any;\r\n}\r\n\r\nexport class ImportFichierDetail extends React.Component<IImportFichierDetailProps, IImportFichierDetailState> {\r\n  componentDidMount() {\r\n    this.props.getEntityByHash(this.props.match.params.id);\r\n    const inter = setInterval(() => this._checkStatus(), 1000);\r\n    this.setState({ intervalStatutClientId: inter });\r\n    this.props.getEntityStatus(this.props.match.params.id);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.state.intervalStatutClientId);\r\n  }\r\n\r\n  _checkStatus = () => {\r\n    this.props.getEntityStatus(this.props.match.params.id);\r\n    if (\r\n      this.props.status.geolocStatut.isFinished &&\r\n      this.props.status.cleanStatut.isFinished &&\r\n      this.props.status.prospectStatut.isFinished\r\n    ) {\r\n      clearInterval(this.state.intervalStatutClientId);\r\n      setTimeout(() => this.props.history.push('/entity/import-fichier/' + this.props.hash + '/result'), 500);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { status } = this.props;\r\n    return (\r\n      <Container body className=\"text-center\">\r\n        {status.geolocStatut && (\r\n          <div>\r\n            {status.geolocStatut.isFinished && status.cleanStatut.isFinished && status.prospectStatut.isFinished ? (\r\n              <div className=\"text-container\">\r\n                <div className=\"text-animation\">\r\n                  <span>Nettoyage termin√©</span>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"spinner\">\r\n                <div className=\"dot1\" />\r\n                <div className=\"dot2\" />\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"text-center\">\r\n              Traitement des lignes clients : {status.cleanStatut.nombreTraite || 0} / {status.cleanStatut.nombreATraite}\r\n            </div>\r\n            <Progress\r\n              className=\"progress\"\r\n              value={Math.round(((status.cleanStatut.nombreTraite || 0) * 100) / status.cleanStatut.nombreATraite)}\r\n              max={100}\r\n            />\r\n            {status.prospectStatut.isStarted && (\r\n              <div>\r\n                <div className=\"text-center\">\r\n                  Recherche de prospects autour de vos clients existants ({status.prospectStatut.nombreTraite || 0} /{' '}\r\n                  {status.prospectStatut.nombreATraite})\r\n                </div>\r\n                <Progress className=\"progress\" value={status.prospectStatut.nombreTraite} max={status.prospectStatut.nombreATraite} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ importFichier }: IRootState) => ({\r\n  importFichierEntity: importFichier.entity,\r\n  status: importFichier.status,\r\n  hash: importFichier.entity.hash\r\n});\r\n\r\nconst mapDispatchToProps = { getEntityByHash, getEntityStatus };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ImportFichierDetail);\r\n"]}]}