{"remainingRequest":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-fichier\\import-fichier-result.tsx","dependencies":[{"path":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-fichier\\import-fichier-result.tsx","mtime":1564646896628},{"path":"C:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import './import-fichier-detail.scss';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Container, Col, Card, Button, CardTitle, CardText, Row } from 'reactstrap';\r\nimport { getSampleResult, getEntity } from './import-fichier.reducer';\r\nimport ReactTable from 'react-table';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearchDollar, faThumbsUp, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\r\nimport { ImportFichierResultMap } from './import-fichier-result-map';\r\nimport ImportFichierResultEchec from './import-fichier-result-echec';\r\nexport class ImportFichierResult extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.getImportFichier = () => {\r\n            this.props.getEntity();\r\n        };\r\n        this.saveEntity = () => {\r\n            const { rows } = this.state;\r\n            let importLigneArray = [];\r\n            rows.forEach(element => {\r\n                const row = {\r\n                    nom: element.nom,\r\n                    adresse: element.adresse,\r\n                    cp: element.codepostal,\r\n                    ville: element.ville,\r\n                    siret: element.siret\r\n                };\r\n                importLigneArray.push(row);\r\n            });\r\n            const entity = {\r\n                dateDebut: moment(),\r\n                importLignes: importLigneArray,\r\n                frontKey: frontKey\r\n            };\r\n            this.props.createEntity(entity);\r\n        };\r\n        this.handleUpload = () => {\r\n            this.props.history.push('/upload');\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.props.getSampleResult(this.props.match.params.id);\r\n    }\r\n    _goToExport() {\r\n        this.props.history.push('/billing/' + this.props.match.params.id);\r\n    }\r\n    formatTable() {\r\n        const { result } = this.props;\r\n        if (result && result.echantillonClients && result.echantillonClients.length > 0) {\r\n            const echantillon = result.echantillonClients.map(item => {\r\n                return {\r\n                    Nom: item.sireneDenomination,\r\n                    Numéro: item.sireneHousenumber,\r\n                    Rue: item.sireneStreet,\r\n                    CP: item.sireneCodepostal,\r\n                    Ville: item.sireneVille,\r\n                    SIRET: item.sireneSiret,\r\n                    Lattitude: item.sireneLatitude,\r\n                    Longitude: item.sireneLongitude\r\n                };\r\n            });\r\n            /*React Table*/\r\n            const columns = Object.keys(echantillon[0]).map(key => {\r\n                return {\r\n                    Header: key,\r\n                    accessor: key\r\n                };\r\n            });\r\n            return {\r\n                rows: echantillon,\r\n                columns\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                rows: [],\r\n                columns: []\r\n            };\r\n        }\r\n    }\r\n    formatTableEchecs() {\r\n        const { result } = this.props;\r\n        if (result && result.echecs && result.echecs.length > 0) {\r\n            console.log(result.echecs);\r\n            const echecs = result.echecs.map(item => {\r\n                if (item.nom == \"\") {\r\n                    item.nom = \"-donnée manquante-\";\r\n                }\r\n                if (item.adresse == \"\") {\r\n                    item.adresse = \"-donnée manquante-\";\r\n                }\r\n                if (item.cp == \"\") {\r\n                    item.cp = \"-donnée manquante-\";\r\n                }\r\n                if (item.ville == \"\") {\r\n                    item.ville = \"-donnée manquante-\";\r\n                }\r\n                if (item.siret == \"\") {\r\n                    item.siret = \"-donnée manquante-\";\r\n                }\r\n                return {\r\n                    Nom: item.nom,\r\n                    Adresse: item.adresse,\r\n                    CP: item.cp,\r\n                    Ville: item.ville,\r\n                    SIRET: item.siret\r\n                };\r\n            });\r\n            /*React Table*/\r\n            const columnsEchecs = Object.keys(echecs[0]).map(key => {\r\n                return {\r\n                    Header: key,\r\n                    accessor: key,\r\n                    Cell: (cellInfo) => {\r\n                        return (React.createElement(\"div\", { style: { backgroundColor: \"#fafafa\" }, contentEditable: true, suppressContentEditableWarning: true, onBlur: e => {\r\n                                const data = [...echecs];\r\n                                data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n                                //ex: this.setState({ data });\r\n                                this.saveEntity();\r\n                            }, dangerouslySetInnerHTML: {\r\n                                __html: echecs[cellInfo.index] ? echecs[cellInfo.index][cellInfo.column.id] : ''\r\n                            } }));\r\n                    }\r\n                };\r\n            });\r\n            return {\r\n                rowsEchecs: echecs,\r\n                columnsEchecs\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                rowsEchecs: [],\r\n                columnsEchecs: []\r\n            };\r\n        }\r\n    }\r\n    render() {\r\n        const { result } = this.props;\r\n        const { rows, columns } = this.formatTable();\r\n        const { rowsEchecs, columnsEchecs } = this.formatTableEchecs();\r\n        return (React.createElement(Container, null,\r\n            React.createElement(\"div\", { className: \"text-container\" },\r\n                React.createElement(\"div\", { className: \"text-animation\" },\r\n                    React.createElement(\"span\", null, \"R\\u00E9sultat du traitement\"))),\r\n            React.createElement(Row, null,\r\n                React.createElement(Col, { sm: \"4\" },\r\n                    React.createElement(Card, { body: true },\r\n                        React.createElement(FontAwesomeIcon, { icon: faThumbsUp, size: \"5x\", color: \"#dfda01\", className: \"icon\", pull: \"left\" }),\r\n                        React.createElement(\"p\", null),\r\n                        React.createElement(CardTitle, { className: \"cardsTitle\" },\r\n                            result.localisationClients ? result.localisationClients.length : '',\r\n                            \" Clients rapproch\\u00E9s\"),\r\n                        result.nombreEtablissementFermes && result.nombreEtablissementFermes > 0 && (React.createElement(CardText, { className: \"cardsTextDemenage\" },\r\n                            \"dont \",\r\n                            result.nombreEtablissementFermes,\r\n                            \" \\u00E9tablissements ont ferm\\u00E9\")),\r\n                        React.createElement(AnchorLink, { className: \"anchorButton\", href: \"#clean\" }, \"Exporter le fichier\"))),\r\n                React.createElement(Col, { sm: \"4\" },\r\n                    React.createElement(Card, { body: true },\r\n                        React.createElement(FontAwesomeIcon, { icon: faSearchDollar, size: \"5x\", color: \"#dfda01\", className: \"icon\", pull: \"left\" }),\r\n                        React.createElement(\"p\", null),\r\n                        React.createElement(CardTitle, { className: \"cardsTitle\" },\r\n                            result.localisationProspects ? result.localisationProspects.length : '',\r\n                            \" Prospects trouv\\u00E9s\"),\r\n                        React.createElement(CardText, null, \"Sur la carte sont affich\\u00E9s des prospects int\\u00E9ressants, en fonction de vos clients existants.\"),\r\n                        React.createElement(AnchorLink, { href: \"#map\", className: \"anchorButton\" }, \"O\\u00F9 sont mes prospects ?\"))),\r\n                React.createElement(Col, { sm: \"4\" },\r\n                    React.createElement(Card, { body: true },\r\n                        React.createElement(FontAwesomeIcon, { icon: faEyeSlash, size: \"5x\", color: \"#dfda01\", className: \"icon\", pull: \"left\" }),\r\n                        React.createElement(\"p\", null),\r\n                        React.createElement(CardTitle, { className: \"cardsTitle\" },\r\n                            result.echecs ? result.echecs.length : '',\r\n                            \" Clients non-rapproch\\u00E9s\"),\r\n                        React.createElement(CardText, null, \"Nous n'avons pas p\\u00FB trouver tous vos clients. Pour un traitement optimal, vous pouvez remplir manuellement certains champs et refaire un import.\"),\r\n                        React.createElement(AnchorLink, { href: \"#unclean\", className: \"anchorButton\" }, \"Voir les entreprises non-rapproch\\u00E9es\")))),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(\"div\", { id: \"clean\" }),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(Col, { md: \"12\" },\r\n                React.createElement(\"div\", { className: \"etatTotal\" }, \"\\u00C9chantillon du fichier nettoy\\u00E9\"),\r\n                React.createElement(ReactTable, { showPagination: false, data: rows, columns: columns, sortable: false, style: {\r\n                        width: '67.5rem'\r\n                    }, pageSize: rows.length, getTrProps: (state, rowInfo, column) => {\r\n                        return {\r\n                            style: {\r\n                                opacity: rowInfo.index < 3 ? 1 : rowInfo.index === 3 ? 0.45 : 0.1\r\n                            }\r\n                        };\r\n                    } }),\r\n                React.createElement(\"br\", null),\r\n                React.createElement(Row, null,\r\n                    React.createElement(Col, { sm: \"4\" }),\r\n                    React.createElement(Col, { sm: \"4\" },\r\n                        React.createElement(Button, { onClick: () => this._goToExport(), className: \"float-none\" }, \"Importer le fichier nettoy\\u00E9\")),\r\n                    React.createElement(Col, { sm: \"4\" }))),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(\"div\", { id: \"map\" }),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(Col, { md: \"12\" },\r\n                React.createElement(\"div\", { className: \"etatTotal\" }, \"Cartographie de mes clients\"),\r\n                React.createElement(ImportFichierResultMap, { result: this.props.result })),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(\"div\", { id: \"unclean\" }),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(Col, { md: \"12\" },\r\n                React.createElement(\"div\", { className: \"etatTotal\" }, \"Clients non rapproch\\u00E9s\"),\r\n                React.createElement(ImportFichierResultEchec, { data: rowsEchecs, columns: columnsEchecs }),\r\n                React.createElement(Row, null,\r\n                    React.createElement(Col, { sm: \"4\" }),\r\n                    React.createElement(Col, { sm: \"4\" },\r\n                        React.createElement(Button, { className: \"float-none\", onClick: this.handleUpload }, \"Refaire un nettoyage des donn\\u00E9es\")),\r\n                    React.createElement(Col, { sm: \"4\" }))),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(\"div\", null),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(\"br\", null)));\r\n    }\r\n}\r\nconst mapStateToProps = ({ importFichier }) => ({\r\n    result: importFichier.result,\r\n    importFichier: importFichier.entity\r\n});\r\nconst mapDispatchToProps = { getSampleResult, getEntity };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ImportFichierResult);\r\n",{"version":3,"file":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-fichier\\import-fichier-result.tsx","sourceRoot":"","sources":["C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-fichier\\import-fichier-result.tsx"],"names":[],"mappings":"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","sourcesContent":["import './import-fichier-detail.scss';\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Container, Col, Card, Button, CardTitle, CardText, Row } from 'reactstrap';\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getSampleResult, getEntity } from './import-fichier.reducer';\r\nimport ReactTable from 'react-table';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearchDollar, faThumbsUp, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons/faWindowClose';\r\nimport {ImportFichierResultMap} from './import-fichier-result-map';\r\nimport ImportFichierResultEchec from './import-fichier-result-echec';\r\nimport { IImportLigne } from 'app/shared/model/import-ligne.model';\r\n\r\nexport interface IImportFichierResultProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\r\n\r\nexport interface IImportFichierResultState {\r\n  rows: any[];\r\n  columns: Array<{ Header: string; accessor: string }>;\r\n  \r\n}\r\n\r\nexport class ImportFichierResult extends React.Component<IImportFichierResultProps, IImportFichierResultState> {\r\n  hash;\r\n  componentDidMount() {\r\n    this.props.getSampleResult(this.props.match.params.id);\r\n  }\r\n\r\n\r\n  _goToExport() {\r\n    this.props.history.push('/billing/' + this.props.match.params.id);\r\n  }\r\n\r\n  formatTable() {\r\n    const { result } = this.props;\r\n    if (result && result.echantillonClients && result.echantillonClients.length > 0) {\r\n      const echantillon = result.echantillonClients.map(item => {\r\n        return {\r\n          Nom: item.sireneDenomination,\r\n          Numéro: item.sireneHousenumber,\r\n          Rue: item.sireneStreet,\r\n          CP: item.sireneCodepostal,\r\n          Ville: item.sireneVille,\r\n          SIRET: item.sireneSiret,\r\n          Lattitude: item.sireneLatitude,\r\n          Longitude: item.sireneLongitude\r\n        };\r\n      });\r\n\r\n      /*React Table*/\r\n      const columns = Object.keys(echantillon[0]).map(key => {\r\n        return {\r\n          Header: key,\r\n          accessor: key\r\n        };\r\n      });\r\n      return {\r\n        rows: echantillon,\r\n        columns\r\n      };\r\n    } else {\r\n      return {\r\n        rows: [],\r\n        columns: []\r\n      };\r\n    }\r\n  }\r\n\r\n  formatTableEchecs() {\r\n    const { result } = this.props;\r\n    \r\n    if (result && result.echecs && result.echecs.length > 0) {\r\n\r\n      console.log(result.echecs);\r\n      const echecs = result.echecs.map(item => {\r\n        if (item.nom == \"\"){\r\n          item.nom = \"-donnée manquante-\";\r\n        }\r\n        if (item.adresse == \"\"){\r\n          item.adresse = \"-donnée manquante-\";\r\n        }\r\n        if (item.cp == \"\"){\r\n          item.cp = \"-donnée manquante-\";\r\n        }\r\n        if (item.ville == \"\"){\r\n          item.ville = \"-donnée manquante-\";\r\n        }\r\n        if (item.siret == \"\"){\r\n          item.siret = \"-donnée manquante-\";\r\n        }\r\n        return {\r\n          Nom: item.nom,\r\n          Adresse: item.adresse,\r\n          CP: item.cp,\r\n          Ville: item.ville,\r\n          SIRET: item.siret\r\n        };\r\n      });\r\n      /*React Table*/\r\n      const columnsEchecs = Object.keys(echecs[0]).map(key => {\r\n        return {\r\n          Header: key,\r\n          accessor: key,\r\n          Cell: (cellInfo) => {\r\n            return (\r\n              <div\r\n                style={{ backgroundColor: \"#fafafa\" }}\r\n                contentEditable\r\n                suppressContentEditableWarning\r\n                onBlur={e => {\r\n                  const data = [...echecs];\r\n                        data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n                        //ex: this.setState({ data });\r\n                        this.saveEntity();\r\n\r\n                              }\r\n                }\r\n                dangerouslySetInnerHTML={{\r\n                  __html: echecs[cellInfo.index] ? echecs[cellInfo.index][cellInfo.column.id] : ''\r\n                }}\r\n              />\r\n            );\r\n          }\r\n        };\r\n      });\r\n      return {\r\n        rowsEchecs: echecs,\r\n        columnsEchecs\r\n      };\r\n    } else {\r\n      return {\r\n        rowsEchecs: [],\r\n        columnsEchecs: []\r\n      };\r\n    }\r\n  }\r\n\r\n  getImportFichier = () => {\r\n    \r\n    this.props.getEntity()\r\n\r\n  }\r\n\r\n  saveEntity = () => {\r\n    const { rows } = this.state;\r\n    let importLigneArray: IImportLigne[] = [];\r\n\r\n    rows.forEach(element => {\r\n      const row: IImportLigne = {\r\n        nom: element.nom,\r\n        adresse: element.adresse,\r\n        cp: element.codepostal,\r\n        ville: element.ville,\r\n        siret: element.siret\r\n      };\r\n      importLigneArray.push(row);\r\n    });\r\n\r\n    const entity: IImportFichier = {\r\n      dateDebut: moment(),\r\n      importLignes: importLigneArray,\r\n      frontKey: frontKey\r\n    };\r\n    this.props.createEntity(entity);\r\n  };\r\n\r\n  handleUpload = () => {\r\n    this.props.history.push('/upload');\r\n  };\r\n\r\n  render() {\r\n    const { result } = this.props;\r\n    const { rows, columns } = this.formatTable();\r\n    const { rowsEchecs, columnsEchecs } = this.formatTableEchecs();\r\n    return (\r\n      <Container>\r\n        <div className=\"text-container\">\r\n          <div className=\"text-animation\">\r\n            <span>Résultat du traitement</span>\r\n          </div>\r\n        </div>\r\n        <Row>\r\n          <Col sm=\"4\">\r\n            <Card body>\r\n              <FontAwesomeIcon icon={faThumbsUp} size=\"5x\" color=\"#dfda01\" className=\"icon\" pull=\"left\" />\r\n              <p />\r\n              <CardTitle className=\"cardsTitle\">\r\n                {result.localisationClients ? result.localisationClients.length : ''} Clients rapprochés\r\n              </CardTitle>\r\n              {result.nombreEtablissementFermes && result.nombreEtablissementFermes > 0 && (\r\n                <CardText className=\"cardsTextDemenage\">dont {result.nombreEtablissementFermes} établissements ont fermé</CardText>\r\n              )}\r\n              <AnchorLink className=\"anchorButton\" href=\"#clean\">\r\n                Exporter le fichier\r\n              </AnchorLink>\r\n            </Card>\r\n          </Col>\r\n          <Col sm=\"4\">\r\n            <Card body>\r\n              <FontAwesomeIcon icon={faSearchDollar} size=\"5x\" color=\"#dfda01\" className=\"icon\" pull=\"left\" />\r\n              <p />\r\n              <CardTitle className=\"cardsTitle\">\r\n                {result.localisationProspects ? result.localisationProspects.length : ''} Prospects trouvés\r\n              </CardTitle>\r\n              <CardText>Sur la carte sont affichés des prospects intéressants, en fonction de vos clients existants.</CardText>\r\n              <AnchorLink href=\"#map\" className=\"anchorButton\">\r\n                Où sont mes prospects ?\r\n              </AnchorLink>\r\n            </Card>\r\n          </Col>\r\n          <Col sm=\"4\">\r\n            <Card body>\r\n              <FontAwesomeIcon icon={faEyeSlash} size=\"5x\" color=\"#dfda01\" className=\"icon\" pull=\"left\" />\r\n              <p />\r\n              <CardTitle className=\"cardsTitle\">{result.echecs ? result.echecs.length : ''} Clients non-rapprochés</CardTitle>\r\n              <CardText>\r\n                Nous n'avons pas pû trouver tous vos clients. Pour un traitement optimal, vous pouvez remplir manuellement certains champs\r\n                et refaire un import.\r\n              </CardText>\r\n              <AnchorLink href=\"#unclean\" className=\"anchorButton\">\r\n                Voir les entreprises non-rapprochées\r\n              </AnchorLink>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <div id=\"clean\" />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <Col md=\"12\">\r\n          <div className=\"etatTotal\">Échantillon du fichier nettoyé</div>\r\n          <ReactTable\r\n            showPagination={false}\r\n            data={rows}\r\n            columns={columns}\r\n            sortable={false}\r\n            style={{\r\n              width: '67.5rem'\r\n            }}\r\n            pageSize={rows.length}\r\n            getTrProps={(state, rowInfo, column) => {\r\n              return {\r\n                style: {\r\n                  opacity: rowInfo.index < 3 ? 1 : rowInfo.index === 3 ? 0.45 : 0.1\r\n                }\r\n              };\r\n            }}\r\n          />\r\n          <br />\r\n          <Row>\r\n            <Col sm=\"4\" />\r\n            <Col sm=\"4\">\r\n              <Button onClick={() => this._goToExport()} className=\"float-none\">\r\n                Importer le fichier nettoyé\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"4\" />\r\n          </Row>\r\n        </Col>\r\n        <br />\r\n        <div id=\"map\" />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <Col md=\"12\">\r\n          <div className=\"etatTotal\">Cartographie de mes clients</div>\r\n          <ImportFichierResultMap result={this.props.result} />\r\n            </Col>\r\n        <br />\r\n        <div id=\"unclean\" />\r\n        <br />\r\n        <Col md=\"12\">\r\n          <div className=\"etatTotal\">Clients non rapprochés</div>\r\n          <ImportFichierResultEchec data={rowsEchecs} columns={columnsEchecs} /> \r\n          <Row>\r\n            <Col sm=\"4\" />\r\n            <Col sm=\"4\">\r\n              <Button className=\"float-none\" onClick={this.handleUpload}>\r\n                Refaire un nettoyage des données\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"4\" />\r\n          </Row>\r\n        </Col>\r\n        <br />\r\n        <div />\r\n        <br />\r\n        <br />\r\n        <br />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ importFichier }: IRootState) => ({\r\n  result: importFichier.result,\r\n  importFichier : importFichier.entity\r\n\r\n});\r\n\r\nconst mapDispatchToProps = { getSampleResult, getEntity };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ImportFichierResult);\r\n"]}]}