{"remainingRequest":"c:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!c:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!c:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!c:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-ligne\\import-ligne.reducer.ts","dependencies":[{"path":"c:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-ligne\\import-ligne.reducer.ts","mtime":1560262739766},{"path":"c:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"c:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"c:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport axios from 'axios';\r\nimport { cleanEntity } from 'app/shared/util/entity-utils';\r\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\r\nimport { defaultValue } from 'app/shared/model/import-ligne.model';\r\nexport const ACTION_TYPES = {\r\n    FETCH_IMPORTLIGNE_LIST: 'importLigne/FETCH_IMPORTLIGNE_LIST',\r\n    FETCH_IMPORTLIGNE: 'importLigne/FETCH_IMPORTLIGNE',\r\n    CREATE_IMPORTLIGNE: 'importLigne/CREATE_IMPORTLIGNE',\r\n    UPDATE_IMPORTLIGNE: 'importLigne/UPDATE_IMPORTLIGNE',\r\n    DELETE_IMPORTLIGNE: 'importLigne/DELETE_IMPORTLIGNE',\r\n    RESET: 'importLigne/RESET'\r\n};\r\nconst initialState = {\r\n    loading: false,\r\n    errorMessage: null,\r\n    entities: [],\r\n    entity: defaultValue,\r\n    updating: false,\r\n    updateSuccess: false\r\n};\r\n// Reducer\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case REQUEST(ACTION_TYPES.FETCH_IMPORTLIGNE_LIST):\r\n        case REQUEST(ACTION_TYPES.FETCH_IMPORTLIGNE):\r\n            return Object.assign({}, state, { errorMessage: null, updateSuccess: false, loading: true });\r\n        case REQUEST(ACTION_TYPES.CREATE_IMPORTLIGNE):\r\n        case REQUEST(ACTION_TYPES.UPDATE_IMPORTLIGNE):\r\n        case REQUEST(ACTION_TYPES.DELETE_IMPORTLIGNE):\r\n            return Object.assign({}, state, { errorMessage: null, updateSuccess: false, updating: true });\r\n        case FAILURE(ACTION_TYPES.FETCH_IMPORTLIGNE_LIST):\r\n        case FAILURE(ACTION_TYPES.FETCH_IMPORTLIGNE):\r\n        case FAILURE(ACTION_TYPES.CREATE_IMPORTLIGNE):\r\n        case FAILURE(ACTION_TYPES.UPDATE_IMPORTLIGNE):\r\n        case FAILURE(ACTION_TYPES.DELETE_IMPORTLIGNE):\r\n            return Object.assign({}, state, { loading: false, updating: false, updateSuccess: false, errorMessage: action.payload });\r\n        case SUCCESS(ACTION_TYPES.FETCH_IMPORTLIGNE_LIST):\r\n            return Object.assign({}, state, { loading: false, entities: action.payload.data });\r\n        case SUCCESS(ACTION_TYPES.FETCH_IMPORTLIGNE):\r\n            return Object.assign({}, state, { loading: false, entity: action.payload.data });\r\n        case SUCCESS(ACTION_TYPES.CREATE_IMPORTLIGNE):\r\n        case SUCCESS(ACTION_TYPES.UPDATE_IMPORTLIGNE):\r\n            return Object.assign({}, state, { updating: false, updateSuccess: true, entity: action.payload.data });\r\n        case SUCCESS(ACTION_TYPES.DELETE_IMPORTLIGNE):\r\n            return Object.assign({}, state, { updating: false, updateSuccess: true, entity: {} });\r\n        case ACTION_TYPES.RESET:\r\n            return Object.assign({}, initialState);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nconst apiUrl = 'api/import-lignes';\r\n// Actions\r\nexport const getEntities = (page, size, sort) => ({\r\n    type: ACTION_TYPES.FETCH_IMPORTLIGNE_LIST,\r\n    payload: axios.get(`${apiUrl}?cacheBuster=${new Date().getTime()}`)\r\n});\r\nexport const getEntity = id => {\r\n    const requestUrl = `${apiUrl}/${id}`;\r\n    return {\r\n        type: ACTION_TYPES.FETCH_IMPORTLIGNE,\r\n        payload: axios.get(requestUrl)\r\n    };\r\n};\r\nexport const createEntity = entity => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n    const result = yield dispatch({\r\n        type: ACTION_TYPES.CREATE_IMPORTLIGNE,\r\n        payload: axios.post(apiUrl, cleanEntity(entity))\r\n    });\r\n    dispatch(getEntities());\r\n    return result;\r\n});\r\nexport const updateEntity = entity => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n    const result = yield dispatch({\r\n        type: ACTION_TYPES.UPDATE_IMPORTLIGNE,\r\n        payload: axios.put(apiUrl, cleanEntity(entity))\r\n    });\r\n    dispatch(getEntities());\r\n    return result;\r\n});\r\nexport const deleteEntity = id => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n    const requestUrl = `${apiUrl}/${id}`;\r\n    const result = yield dispatch({\r\n        type: ACTION_TYPES.DELETE_IMPORTLIGNE,\r\n        payload: axios.delete(requestUrl)\r\n    });\r\n    dispatch(getEntities());\r\n    return result;\r\n});\r\nexport const reset = () => ({\r\n    type: ACTION_TYPES.RESET\r\n});\r\n",{"version":3,"file":"c:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-ligne\\import-ligne.reducer.ts","sourceRoot":"","sources":["c:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!c:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-ligne\\import-ligne.reducer.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { ICrudGetAction, ICrudGetAllAction, ICrudPutAction, ICrudDeleteAction } from 'react-jhipster';\n\nimport { cleanEntity } from 'app/shared/util/entity-utils';\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\n\nimport { IImportLigne, defaultValue } from 'app/shared/model/import-ligne.model';\n\nexport const ACTION_TYPES = {\n  FETCH_IMPORTLIGNE_LIST: 'importLigne/FETCH_IMPORTLIGNE_LIST',\n  FETCH_IMPORTLIGNE: 'importLigne/FETCH_IMPORTLIGNE',\n  CREATE_IMPORTLIGNE: 'importLigne/CREATE_IMPORTLIGNE',\n  UPDATE_IMPORTLIGNE: 'importLigne/UPDATE_IMPORTLIGNE',\n  DELETE_IMPORTLIGNE: 'importLigne/DELETE_IMPORTLIGNE',\n  RESET: 'importLigne/RESET'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  entities: [] as ReadonlyArray<IImportLigne>,\n  entity: defaultValue,\n  updating: false,\n  updateSuccess: false\n};\n\nexport type ImportLigneState = Readonly<typeof initialState>;\n\n// Reducer\n\nexport default (state: ImportLigneState = initialState, action): ImportLigneState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_IMPORTLIGNE_LIST):\n    case REQUEST(ACTION_TYPES.FETCH_IMPORTLIGNE):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.CREATE_IMPORTLIGNE):\n    case REQUEST(ACTION_TYPES.UPDATE_IMPORTLIGNE):\n    case REQUEST(ACTION_TYPES.DELETE_IMPORTLIGNE):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        updating: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_IMPORTLIGNE_LIST):\n    case FAILURE(ACTION_TYPES.FETCH_IMPORTLIGNE):\n    case FAILURE(ACTION_TYPES.CREATE_IMPORTLIGNE):\n    case FAILURE(ACTION_TYPES.UPDATE_IMPORTLIGNE):\n    case FAILURE(ACTION_TYPES.DELETE_IMPORTLIGNE):\n      return {\n        ...state,\n        loading: false,\n        updating: false,\n        updateSuccess: false,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_IMPORTLIGNE_LIST):\n      return {\n        ...state,\n        loading: false,\n        entities: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_IMPORTLIGNE):\n      return {\n        ...state,\n        loading: false,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.CREATE_IMPORTLIGNE):\n    case SUCCESS(ACTION_TYPES.UPDATE_IMPORTLIGNE):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.DELETE_IMPORTLIGNE):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: {}\n      };\n    case ACTION_TYPES.RESET:\n      return {\n        ...initialState\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = 'api/import-lignes';\n\n// Actions\n\nexport const getEntities: ICrudGetAllAction<IImportLigne> = (page, size, sort) => ({\n  type: ACTION_TYPES.FETCH_IMPORTLIGNE_LIST,\n  payload: axios.get<IImportLigne>(`${apiUrl}?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getEntity: ICrudGetAction<IImportLigne> = id => {\n  const requestUrl = `${apiUrl}/${id}`;\n  return {\n    type: ACTION_TYPES.FETCH_IMPORTLIGNE,\n    payload: axios.get<IImportLigne>(requestUrl)\n  };\n};\n\nexport const createEntity: ICrudPutAction<IImportLigne> = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.CREATE_IMPORTLIGNE,\n    payload: axios.post(apiUrl, cleanEntity(entity))\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const updateEntity: ICrudPutAction<IImportLigne> = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.UPDATE_IMPORTLIGNE,\n    payload: axios.put(apiUrl, cleanEntity(entity))\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const deleteEntity: ICrudDeleteAction<IImportLigne> = id => async dispatch => {\n  const requestUrl = `${apiUrl}/${id}`;\n  const result = await dispatch({\n    type: ACTION_TYPES.DELETE_IMPORTLIGNE,\n    payload: axios.delete(requestUrl)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET\n});\n"]}]}