{"remainingRequest":"c:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!c:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!c:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!c:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\administration\\audits\\audits.tsx","dependencies":[{"path":"c:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\administration\\audits\\audits.tsx","mtime":1560254030618},{"path":"c:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"c:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"c:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Input, Row, Table } from 'reactstrap';\r\nimport { Translate, TextFormat, JhiPagination, getPaginationItemsNumber, getSortState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { APP_TIMESTAMP_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\nimport { getAudits } from '../administration.reducer';\r\nconst previousMonth = () => {\r\n    const now = new Date();\r\n    const fromDate = now.getMonth() === 0\r\n        ? new Date(now.getFullYear() - 1, 11, now.getDate())\r\n        : new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\r\n    return fromDate.toISOString().slice(0, 10);\r\n};\r\nconst today = () => {\r\n    // Today + 1 day - needed if the current day must be included\r\n    const day = new Date();\r\n    day.setDate(day.getDate() + 1);\r\n    const toDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\r\n    return toDate.toISOString().slice(0, 10);\r\n};\r\nexport class AuditsPage extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = Object.assign({}, getSortState(this.props.location, ITEMS_PER_PAGE), { fromDate: previousMonth(), toDate: today() });\r\n        this.onChangeFromDate = evt => {\r\n            this.setState({\r\n                fromDate: evt.target.value\r\n            }, () => this.getAudits());\r\n        };\r\n        this.onChangeToDate = evt => {\r\n            this.setState({\r\n                toDate: evt.target.value\r\n            }, () => this.getAudits());\r\n        };\r\n        this.sort = prop => () => {\r\n            this.setState({\r\n                order: this.state.order === 'asc' ? 'desc' : 'asc',\r\n                sort: prop\r\n            }, () => this.transition());\r\n        };\r\n        this.transition = () => {\r\n            this.getAudits();\r\n            this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\r\n        };\r\n        this.handlePagination = activePage => this.setState({ activePage }, () => this.transition());\r\n        this.getAudits = () => {\r\n            const { activePage, itemsPerPage, sort, order, fromDate, toDate } = this.state;\r\n            this.props.getAudits(activePage - 1, itemsPerPage, `${sort},${order}`, fromDate, toDate);\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.getAudits();\r\n    }\r\n    render() {\r\n        const { audits, totalItems } = this.props;\r\n        const { fromDate, toDate } = this.state;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"h2\", { id: \"audits-page-heading\" }, \"Audits\"),\r\n            React.createElement(\"span\", null,\r\n                React.createElement(Translate, { contentKey: \"audits.filter.from\" }, \"from\")),\r\n            React.createElement(Input, { type: \"date\", value: fromDate, onChange: this.onChangeFromDate, name: \"fromDate\", id: \"fromDate\" }),\r\n            React.createElement(\"span\", null,\r\n                React.createElement(Translate, { contentKey: \"audits.filter.to\" }, \"to\")),\r\n            React.createElement(Input, { type: \"date\", value: toDate, onChange: this.onChangeToDate, name: \"toDate\", id: \"toDate\" }),\r\n            React.createElement(Table, { striped: true, responsive: true },\r\n                React.createElement(\"thead\", null,\r\n                    React.createElement(\"tr\", null,\r\n                        React.createElement(\"th\", { onClick: this.sort('auditEventDate') },\r\n                            React.createElement(Translate, { contentKey: \"audits.table.header.date\" }, \"Date\"),\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", { onClick: this.sort('principal') },\r\n                            React.createElement(Translate, { contentKey: \"audits.table.header.principal\" }, \"User\"),\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", { onClick: this.sort('auditEventType') },\r\n                            React.createElement(Translate, { contentKey: \"audits.table.header.status\" }, \"State\"),\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"audits.table.header.data\" }, \"Extra data\")))),\r\n                React.createElement(\"tbody\", null, audits.map((audit, i) => (React.createElement(\"tr\", { key: `audit-${i}` },\r\n                    React.createElement(\"td\", null, React.createElement(TextFormat, { value: audit.timestamp, type: \"date\", format: APP_TIMESTAMP_FORMAT })),\r\n                    React.createElement(\"td\", null, audit.principal),\r\n                    React.createElement(\"td\", null, audit.type),\r\n                    React.createElement(\"td\", null,\r\n                        audit.data ? audit.data.message : null,\r\n                        audit.data ? audit.data.remoteAddress : null)))))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(JhiPagination, { items: getPaginationItemsNumber(totalItems, this.state.itemsPerPage), activePage: this.state.activePage, onSelect: this.handlePagination, maxButtons: 5 }))));\r\n    }\r\n}\r\nconst mapStateToProps = (storeState) => ({\r\n    audits: storeState.administration.audits,\r\n    totalItems: storeState.administration.totalItems\r\n});\r\nconst mapDispatchToProps = { getAudits };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditsPage);\r\n",{"version":3,"file":"c:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\administration\\audits\\audits.tsx","sourceRoot":"","sources":["c:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!c:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\administration\\audits\\audits.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router';\nimport { Input, Row, Table } from 'reactstrap';\nimport { Translate, TextFormat, JhiPagination, getPaginationItemsNumber, getSortState, IPaginationBaseState } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_TIMESTAMP_FORMAT } from 'app/config/constants';\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { getAudits } from '../administration.reducer';\n\nexport interface IAuditsPageProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\n\nexport interface IAuditsPageState extends IPaginationBaseState {\n  fromDate: string;\n  toDate: string;\n}\n\nconst previousMonth = (): string => {\n  const now: Date = new Date();\n  const fromDate =\n    now.getMonth() === 0\n      ? new Date(now.getFullYear() - 1, 11, now.getDate())\n      : new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\n  return fromDate.toISOString().slice(0, 10);\n};\n\nconst today = (): string => {\n  // Today + 1 day - needed if the current day must be included\n  const day: Date = new Date();\n  day.setDate(day.getDate() + 1);\n  const toDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\n  return toDate.toISOString().slice(0, 10);\n};\n\nexport class AuditsPage extends React.Component<IAuditsPageProps, IAuditsPageState> {\n  state: IAuditsPageState = {\n    ...getSortState(this.props.location, ITEMS_PER_PAGE),\n    fromDate: previousMonth(),\n    toDate: today()\n  };\n\n  componentDidMount() {\n    this.getAudits();\n  }\n\n  onChangeFromDate = evt => {\n    this.setState(\n      {\n        fromDate: evt.target.value\n      },\n      () => this.getAudits()\n    );\n  };\n  onChangeToDate = evt => {\n    this.setState(\n      {\n        toDate: evt.target.value\n      },\n      () => this.getAudits()\n    );\n  };\n\n  sort = prop => () => {\n    this.setState(\n      {\n        order: this.state.order === 'asc' ? 'desc' : 'asc',\n        sort: prop\n      },\n      () => this.transition()\n    );\n  };\n\n  transition = () => {\n    this.getAudits();\n    this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\n  };\n\n  handlePagination = activePage => this.setState({ activePage }, () => this.transition());\n\n  getAudits = () => {\n    const { activePage, itemsPerPage, sort, order, fromDate, toDate } = this.state;\n    this.props.getAudits(activePage - 1, itemsPerPage, `${sort},${order}`, fromDate, toDate);\n  };\n\n  render() {\n    const { audits, totalItems } = this.props;\n    const { fromDate, toDate } = this.state;\n    return (\n      <div>\n        <h2 id=\"audits-page-heading\">Audits</h2>\n        <span>\n          <Translate contentKey=\"audits.filter.from\">from</Translate>\n        </span>\n        <Input type=\"date\" value={fromDate} onChange={this.onChangeFromDate} name=\"fromDate\" id=\"fromDate\" />\n        <span>\n          <Translate contentKey=\"audits.filter.to\">to</Translate>\n        </span>\n        <Input type=\"date\" value={toDate} onChange={this.onChangeToDate} name=\"toDate\" id=\"toDate\" />\n        <Table striped responsive>\n          <thead>\n            <tr>\n              <th onClick={this.sort('auditEventDate')}>\n                <Translate contentKey=\"audits.table.header.date\">Date</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th onClick={this.sort('principal')}>\n                <Translate contentKey=\"audits.table.header.principal\">User</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th onClick={this.sort('auditEventType')}>\n                <Translate contentKey=\"audits.table.header.status\">State</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th>\n                <Translate contentKey=\"audits.table.header.data\">Extra data</Translate>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {audits.map((audit, i) => (\n              <tr key={`audit-${i}`}>\n                <td>{<TextFormat value={audit.timestamp} type=\"date\" format={APP_TIMESTAMP_FORMAT} />}</td>\n                <td>{audit.principal}</td>\n                <td>{audit.type}</td>\n                <td>\n                  {audit.data ? audit.data.message : null}\n                  {audit.data ? audit.data.remoteAddress : null}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n        <Row className=\"justify-content-center\">\n          <JhiPagination\n            items={getPaginationItemsNumber(totalItems, this.state.itemsPerPage)}\n            activePage={this.state.activePage}\n            onSelect={this.handlePagination}\n            maxButtons={5}\n          />\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  audits: storeState.administration.audits,\n  totalItems: storeState.administration.totalItems\n});\n\nconst mapDispatchToProps = { getAudits };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AuditsPage);\n"]}]}