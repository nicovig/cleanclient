{"remainingRequest":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\upload\\upload-modal-sheet.tsx","dependencies":[{"path":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\upload\\upload-modal-sheet.tsx","mtime":1563787215350},{"path":"C:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { Modal, Button, ModalHeader, ModalBody, ButtonGroup } from 'reactstrap';\r\nimport { Translate } from 'react-jhipster';\r\nexport class UploadModalSheet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // currying : permet de découper en 2 la fonction. Donc dans le jsx on peut passer un paramètre à cette fonction sans que ce soit interprété comment un appel à la fonction\r\n        this._chooseSheet = sheet => evt => {\r\n            this.props.chooseSheet(sheet);\r\n        };\r\n        this._automaticChooseSheet = sheet => {\r\n            this.props.chooseSheet(sheet);\r\n        };\r\n        this._cancelModal = () => {\r\n            this.props.cancelModal();\r\n        };\r\n        this._isChoiceModalNecessary = () => {\r\n            const excelSheets = this.props.excelWorkbook.SheetNames || [];\r\n            const modal = excelSheets.length > 1 ? true : false;\r\n            if (excelSheets.length === 1) {\r\n                this._automaticChooseSheet(excelSheets[0]);\r\n                return false;\r\n            }\r\n            else {\r\n                if (excelSheets.length > 1) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n        };\r\n        this.state = {\r\n            modal: false\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        document.title = 'Choisissez votre feuille excel';\r\n    }\r\n    render() {\r\n        const excelSheets = this.props.excelWorkbook.SheetNames || [];\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Modal, { isOpen: this._isChoiceModalNecessary() || this.props.excelSheetsChosen !== '', toggle: this._cancelModal, className: \"text-center\" },\r\n                React.createElement(ModalHeader, { toggle: this._cancelModal },\r\n                    React.createElement(Translate, { contentKey: \"upload.modal.title\" }, \"Import your B to B Customers excel file\")),\r\n                React.createElement(ModalBody, { className: \"text-center\" },\r\n                    React.createElement(ButtonGroup, { vertical: true }, excelSheets.map((item, i) => (React.createElement(Button, { key: `item-${i}`, color: \"primary\", onClick: this._chooseSheet(item) }, item))))))));\r\n    }\r\n}\r\n",{"version":3,"file":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\upload\\upload-modal-sheet.tsx","sourceRoot":"","sources":["C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\upload\\upload-modal-sheet.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AAChF,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAa3C,MAAM,OAAO,gBAAiB,SAAQ,KAAK,CAAC,SAAwD;IAClG,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QAUf,2KAA2K;QAC3K,iBAAY,GAAG,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE;YAC5B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC;QAEF,0BAAqB,GAAG,KAAK,CAAC,EAAE;YAC9B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC;QAEF,iBAAY,GAAG,GAAG,EAAE;YAClB,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;QAC3B,CAAC,CAAC;QAEF,4BAAuB,GAAG,GAAG,EAAE;YAC7B,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,IAAI,EAAE,CAAC;YAC9D,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;YACpD,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC5B,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3C,OAAO,KAAK,CAAC;aACd;iBAAM;gBACL,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC1B,OAAO,IAAI,CAAC;iBACb;qBAAM;oBACL,OAAO,KAAK,CAAC;iBACd;aACF;QACH,CAAC,CAAC;QAnCA,IAAI,CAAC,KAAK,GAAG;YACX,KAAK,EAAE,KAAK;SACb,CAAC;IACJ,CAAC;IAED,iBAAiB;QACf,QAAQ,CAAC,KAAK,GAAG,gCAAgC,CAAC;IACpD,CAAC;IA8BD,MAAM;QACJ,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,IAAI,EAAE,CAAC;QAC9D,OAAO,CACL;YACE,oBAAC,KAAK,IACJ,MAAM,EAAE,IAAI,CAAC,uBAAuB,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,iBAAiB,KAAK,EAAE,EAC7E,MAAM,EAAE,IAAI,CAAC,YAAY,EACzB,SAAS,EAAC,aAAa;gBAEvB,oBAAC,WAAW,IAAC,MAAM,EAAE,IAAI,CAAC,YAAY;oBACpC,oBAAC,SAAS,IAAC,UAAU,EAAC,oBAAoB,8CAAoD,CAClF;gBACd,oBAAC,SAAS,IAAC,SAAS,EAAC,aAAa;oBAChC,oBAAC,WAAW,IAAC,QAAQ,UAClB,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAC5B,oBAAC,MAAM,IAAC,GAAG,EAAE,QAAQ,CAAC,EAAE,EAAE,KAAK,EAAC,SAAS,EAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IACvE,IAAI,CACE,CACV,CAAC,CACU,CACJ,CACN,CACJ,CACP,CAAC;IACJ,CAAC;CACF","sourcesContent":["import React from 'react';\r\nimport { Modal, Button, ModalHeader, ModalBody, ButtonGroup } from 'reactstrap';\r\nimport { Translate } from 'react-jhipster';\r\n\r\nexport interface IUploadModalSheetState {\r\n  modal: boolean;\r\n}\r\n\r\nexport interface IUploadModalSheetProp {\r\n  excelWorkbook: any;\r\n  cancelModal;\r\n  chooseSheet;\r\n  excelSheetsChosen: string;\r\n}\r\n\r\nexport class UploadModalSheet extends React.Component<IUploadModalSheetProp, IUploadModalSheetState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = 'Choisissez votre feuille excel';\r\n  }\r\n\r\n  // currying : permet de découper en 2 la fonction. Donc dans le jsx on peut passer un paramètre à cette fonction sans que ce soit interprété comment un appel à la fonction\r\n  _chooseSheet = sheet => evt => {\r\n    this.props.chooseSheet(sheet);\r\n  };\r\n\r\n  _automaticChooseSheet = sheet => {\r\n    this.props.chooseSheet(sheet);\r\n  };\r\n\r\n  _cancelModal = () => {\r\n    this.props.cancelModal();\r\n  };\r\n\r\n  _isChoiceModalNecessary = () => {\r\n    const excelSheets = this.props.excelWorkbook.SheetNames || [];\r\n    const modal = excelSheets.length > 1 ? true : false;\r\n    if (excelSheets.length === 1) {\r\n      this._automaticChooseSheet(excelSheets[0]);\r\n      return false;\r\n    } else {\r\n      if (excelSheets.length > 1) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const excelSheets = this.props.excelWorkbook.SheetNames || [];\r\n    return (\r\n      <div>\r\n        <Modal\r\n          isOpen={this._isChoiceModalNecessary() || this.props.excelSheetsChosen !== ''}\r\n          toggle={this._cancelModal}\r\n          className=\"text-center\"\r\n        >\r\n          <ModalHeader toggle={this._cancelModal}>\r\n            <Translate contentKey=\"upload.modal.title\">Import your B to B Customers excel file</Translate>\r\n          </ModalHeader>\r\n          <ModalBody className=\"text-center\">\r\n            <ButtonGroup vertical>\r\n              {excelSheets.map((item, i) => (\r\n                <Button key={`item-${i}`} color=\"primary\" onClick={this._chooseSheet(item)}>\r\n                  {item}\r\n                </Button>\r\n              ))}\r\n            </ButtonGroup>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}]}