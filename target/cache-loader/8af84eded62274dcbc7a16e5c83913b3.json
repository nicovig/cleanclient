{"remainingRequest":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\myAccount\\myAccount.tsx","dependencies":[{"path":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\myAccount\\myAccount.tsx","mtime":1564662425433},{"path":"C:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { Col, Row, Card, ListGroup, ListGroupItem } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { getEntitiesFacture, getFacturePdf } from 'app/entities/facture/facture.reducer';\r\nimport { getEntitiesImportFichier, getFullResult } from 'app/entities/import-fichier/import-fichier.reducer';\r\nimport { TextFormat } from 'react-jhipster';\r\nimport { MyAccountFullResultMap } from './myAccount-fullresult-map';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { APP_TIMESTAMP_FORMAT } from 'app/config/constants';\r\nimport { faPoll, faFileInvoice } from '@fortawesome/free-solid-svg-icons';\r\nexport class myaccount extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClickFacture = (id) => {\r\n            this.props.getFacturePdf(id);\r\n        };\r\n        this.handleClickView = (id) => {\r\n            if (this.state.resultView != id) {\r\n                this.setState({ mapped: true });\r\n                this.setState({ resultView: id });\r\n                this.props.getFullResult(id);\r\n            }\r\n        };\r\n        this.state = {\r\n            mapped: false,\r\n            resultView: 0\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.props.getEntitiesImportFichier();\r\n        this.props.getEntitiesFacture();\r\n    }\r\n    render() {\r\n        const { account, importsFichiers, facture, fullResult } = this.props;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", null,\r\n                        \"Bienvenue sur votre compte, \",\r\n                        account.login))),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(Row, null,\r\n                React.createElement(Col, { md: \"3\" },\r\n                    React.createElement(Row, null,\r\n                        React.createElement(Card, null,\r\n                            React.createElement(Row, null,\r\n                                React.createElement(Col, null,\r\n                                    React.createElement(FontAwesomeIcon, { icon: faPoll, size: \"5x\", color: \"#dfda01\", className: \"icon\" })),\r\n                                React.createElement(Col, null,\r\n                                    React.createElement(\"h2\", null, \"Vos traitements\"))),\r\n                            React.createElement(ListGroup, null, importsFichiers.map((item) => React.createElement(ListGroupItem, { format: APP_TIMESTAMP_FORMAT },\r\n                                \"Traitement \",\r\n                                item.id,\r\n                                \" du \",\r\n                                React.createElement(TextFormat, { type: \"date\", value: item.dateDebut, format: APP_TIMESTAMP_FORMAT }),\r\n                                React.createElement(\"br\", null),\r\n                                React.createElement(\"a\", { onClick: () => this.handleClickView(item.traitementId) }, 'Voir'),\r\n                                \" / \",\r\n                                React.createElement(\"a\", null, \"T\\u00E9l\\u00E9charger\")))))),\r\n                    React.createElement(\"br\", null),\r\n                    React.createElement(Row, null,\r\n                        React.createElement(Card, null,\r\n                            React.createElement(Row, null,\r\n                                React.createElement(Col, null,\r\n                                    React.createElement(FontAwesomeIcon, { icon: faFileInvoice, size: \"5x\", color: \"#dfda01\", className: \"icon\" })),\r\n                                React.createElement(Col, null,\r\n                                    React.createElement(\"h2\", null, \"Vos factures\"))),\r\n                            React.createElement(ListGroup, null, facture.map((item) => React.createElement(ListGroupItem, null,\r\n                                \"Facture \",\r\n                                item.id,\r\n                                \" du \",\r\n                                React.createElement(TextFormat, { type: \"date\", value: item.importFichier.dateDebut, format: APP_TIMESTAMP_FORMAT }),\r\n                                React.createElement(\"br\", null),\r\n                                React.createElement(\"a\", { onClick: () => this.handleClickFacture(item.importFichier.id) }, 'Télécharger'))))))),\r\n                React.createElement(Col, { md: \"9\" },\r\n                    React.createElement(MyAccountFullResultMap, { fullResult: fullResult, mapped: this.state.mapped })))));\r\n    }\r\n}\r\nconst mapStateToProps = ({ authentication, importFichier, facture }) => ({\r\n    account: authentication.account,\r\n    isAuthenticated: authentication.isAuthenticated,\r\n    importsFichiers: importFichier.entities,\r\n    facture: facture.entities,\r\n    fullResult: importFichier.fullResult\r\n});\r\nconst mapDispatchToProps = { getEntitiesImportFichier, getEntitiesFacture, getFacturePdf, getFullResult };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(myaccount);\r\n",{"version":3,"file":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\myAccount\\myAccount.tsx","sourceRoot":"","sources":["C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\myAccount\\myAccount.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport { Col, Row, Card, ListGroup, ListGroupItem } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getEntitiesFacture, getFacturePdf } from 'app/entities/facture/facture.reducer';\r\nimport { getEntitiesImportFichier, getFullResult } from 'app/entities/import-fichier/import-fichier.reducer';\r\nimport { TextFormat } from 'react-jhipster';\r\nimport { MyAccountFullResultMap } from './myAccount-fullresult-map';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { APP_TIMESTAMP_FORMAT } from 'app/config/constants';\r\nimport { faPoll, faFileInvoice } from '@fortawesome/free-solid-svg-icons'; \r\nimport {ImportFichierResultMap} from 'app/entities/import-fichier/import-fichier-result-map'\r\n\r\nexport interface ImyAccountSettingsProps extends StateProps, DispatchProps {\r\n\r\n}\r\n\r\nexport interface ImyAccountSettingsState {\r\n  mapped:boolean;\r\n  resultView:number;\r\n}\r\n\r\nexport class myaccount extends React.Component<ImyAccountSettingsProps, ImyAccountSettingsState> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mapped:false,\r\n      resultView:0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getEntitiesImportFichier();\r\n    this.props.getEntitiesFacture();\r\n  } \r\n\r\n  handleClickFacture = (id) => {\r\n    this.props.getFacturePdf(id);\r\n  }\r\n\r\n  handleClickView = (id) => {\r\n    if(this.state.resultView != id){\r\n      this.setState({mapped : true});\r\n      this.setState({resultView : id });\r\n      this.props.getFullResult(id);\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  render() {\r\n    const { account, importsFichiers, facture, fullResult } = this.props;\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <h2>\r\n                Bienvenue sur votre compte, {account.login}\r\n            </h2>\r\n          </Col>\r\n        </Row>\r\n        <br/>\r\n        <Row>\r\n            <Col md=\"3\">\r\n                <Row>\r\n                    <Card>\r\n                        <Row>\r\n                            <Col>\r\n                                <FontAwesomeIcon icon={faPoll} size=\"5x\" color=\"#dfda01\" className=\"icon\" />\r\n                            </Col>\r\n                            <Col>\r\n                                <h2>Vos traitements</h2>\r\n                            </Col>\r\n                        </Row>\r\n                        <ListGroup>\r\n                          {importsFichiers.map((item) =>\r\n                            <ListGroupItem format={APP_TIMESTAMP_FORMAT}>\r\n                            Traitement {item.id} du <TextFormat type=\"date\" value={item.dateDebut} format={APP_TIMESTAMP_FORMAT}/>\r\n                            <br/>\r\n                            <a onClick={() => this.handleClickView(item.traitementId)}>{'Voir'}</a> / <a>Télécharger</a>\r\n                            </ListGroupItem>\r\n                            )}\r\n                            \r\n                        </ListGroup>\r\n                    </Card>\r\n                </Row>\r\n                <br/>\r\n                <Row >\r\n                    <Card>\r\n                        <Row>\r\n                            <Col>\r\n                                <FontAwesomeIcon icon={faFileInvoice} size=\"5x\" color=\"#dfda01\" className=\"icon\" />\r\n                            </Col>\r\n                            <Col>\r\n                                <h2>Vos factures</h2>\r\n                            </Col>\r\n                        </Row>\r\n                        <ListGroup>\r\n                          {facture.map((item) =>\r\n                            <ListGroupItem>\r\n                            Facture {item.id} du <TextFormat type=\"date\" value={item.importFichier.dateDebut} format={APP_TIMESTAMP_FORMAT}/>\r\n                            <br/>        \r\n                            <a onClick={() => this.handleClickFacture(item.importFichier.id)}>{'Télécharger'}</a>\r\n                            </ListGroupItem>\r\n                          )}\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Row>\r\n            </Col>\r\n            <Col md=\"9\">\r\n              <MyAccountFullResultMap fullResult={fullResult} mapped={this.state.mapped}\r\n              /> \r\n            </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ authentication, importFichier, facture }: IRootState) => ({\r\n  account: authentication.account,\r\n  isAuthenticated: authentication.isAuthenticated,\r\n  importsFichiers: importFichier.entities,\r\n  facture: facture.entities,\r\n  fullResult : importFichier.fullResult\r\n});\r\n\r\nconst mapDispatchToProps = { getEntitiesImportFichier, getEntitiesFacture, getFacturePdf, getFullResult };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(myaccount);\r\n"]}]}