{"remainingRequest":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\administration\\health\\health.tsx","dependencies":[{"path":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\administration\\health\\health.tsx","mtime":1560254030794},{"path":"C:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Translate } from 'react-jhipster';\r\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { systemHealth } from '../administration.reducer';\r\nimport HealthModal from './health-modal';\r\nexport class HealthPage extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            healthObject: {},\r\n            showModal: false\r\n        };\r\n        this.getSystemHealth = () => {\r\n            if (!this.props.isFetching) {\r\n                this.props.systemHealth();\r\n            }\r\n        };\r\n        this.getSystemHealthInfo = (name, healthObject) => () => {\r\n            this.setState({\r\n                showModal: true,\r\n                healthObject: Object.assign({}, healthObject, { name })\r\n            });\r\n        };\r\n        this.handleClose = () => {\r\n            this.setState({\r\n                showModal: false\r\n            });\r\n        };\r\n        this.renderModal = () => {\r\n            const { healthObject } = this.state;\r\n            return React.createElement(HealthModal, { healthObject: healthObject, handleClose: this.handleClose, showModal: this.state.showModal });\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.props.systemHealth();\r\n    }\r\n    render() {\r\n        const { health, isFetching } = this.props;\r\n        const data = (health || {}).details || {};\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"h2\", { id: \"health-page-heading\" }, \"Health Checks\"),\r\n            React.createElement(\"p\", null,\r\n                React.createElement(Button, { onClick: this.getSystemHealth, color: isFetching ? 'btn btn-danger' : 'btn btn-primary', disabled: isFetching },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"sync\" }),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Translate, { component: \"span\", contentKey: \"health.refresh.button\" }, \"Refresh\"))),\r\n            React.createElement(Row, null,\r\n                React.createElement(Col, { md: \"12\" },\r\n                    React.createElement(Table, { bordered: true },\r\n                        React.createElement(\"thead\", null,\r\n                            React.createElement(\"tr\", null,\r\n                                React.createElement(\"th\", null, \"Service Name\"),\r\n                                React.createElement(\"th\", null, \"Status\"),\r\n                                React.createElement(\"th\", null, \"Details\"))),\r\n                        React.createElement(\"tbody\", null, Object.keys(data).map((configPropKey, configPropIndex) => configPropKey !== 'status' ? (React.createElement(\"tr\", { key: configPropIndex },\r\n                            React.createElement(\"td\", null, configPropKey),\r\n                            React.createElement(\"td\", null,\r\n                                React.createElement(Badge, { color: data[configPropKey].status !== 'UP' ? 'danger' : 'success' }, data[configPropKey].status)),\r\n                            React.createElement(\"td\", null, data[configPropKey].details ? (React.createElement(\"a\", { onClick: this.getSystemHealthInfo(configPropKey, data[configPropKey]) },\r\n                                React.createElement(FontAwesomeIcon, { icon: \"eye\" }))) : null))) : null))))),\r\n            this.renderModal()));\r\n    }\r\n}\r\nconst mapStateToProps = (storeState) => ({\r\n    health: storeState.administration.health,\r\n    isFetching: storeState.administration.loading\r\n});\r\nconst mapDispatchToProps = { systemHealth };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HealthPage);\r\n",{"version":3,"file":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\administration\\health\\health.tsx","sourceRoot":"","sources":["C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\administration\\health\\health.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAC5D,OAAO,EAAE,eAAe,EAAE,MAAM,gCAAgC,CAAC;AAGjE,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,WAAW,MAAM,gBAAgB,CAAC;AASzC,MAAM,OAAO,UAAW,SAAQ,KAAK,CAAC,SAA6C;IAAnF;;QACE,UAAK,GAAqB;YACxB,YAAY,EAAE,EAAE;YAChB,SAAS,EAAE,KAAK;SACjB,CAAC;QAMF,oBAAe,GAAG,GAAG,EAAE;YACrB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;gBAC1B,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;aAC3B;QACH,CAAC,CAAC;QAEF,wBAAmB,GAAG,CAAC,IAAI,EAAE,YAAY,EAAE,EAAE,CAAC,GAAG,EAAE;YACjD,IAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,IAAI;gBACf,YAAY,oBACP,YAAY,IACf,IAAI,GACL;aACF,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,gBAAW,GAAG,GAAG,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,KAAK;aACjB,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,gBAAW,GAAG,GAAG,EAAE;YACjB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YACpC,OAAO,oBAAC,WAAW,IAAC,YAAY,EAAE,YAAY,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,GAAI,CAAC;QACrH,CAAC,CAAC;IAqDJ,CAAC;IAlFC,iBAAiB;QACf,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;IAC5B,CAAC;IA6BD,MAAM;QACJ,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1C,MAAM,IAAI,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC;QAC1C,OAAO,CACL;YACE,4BAAI,EAAE,EAAC,qBAAqB,oBAAmB;YAC/C;gBACE,oBAAC,MAAM,IAAC,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,iBAAiB,EAAE,QAAQ,EAAE,UAAU;oBACnH,oBAAC,eAAe,IAAC,IAAI,EAAC,MAAM,GAAG;;oBAE/B,oBAAC,SAAS,IAAC,SAAS,EAAC,MAAM,EAAC,UAAU,EAAC,uBAAuB,cAElD,CACL,CACP;YACJ,oBAAC,GAAG;gBACF,oBAAC,GAAG,IAAC,EAAE,EAAC,IAAI;oBACV,oBAAC,KAAK,IAAC,QAAQ;wBACb;4BACE;gCACE,+CAAqB;gCACrB,yCAAe;gCACf,0CAAgB,CACb,CACC;wBACR,mCACG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,eAAe,EAAE,EAAE,CACxD,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,CAC3B,4BAAI,GAAG,EAAE,eAAe;4BACtB,gCAAK,aAAa,CAAM;4BACxB;gCACE,oBAAC,KAAK,IAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,IAAG,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,CAAS,CAC3G;4BACL,gCACG,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAC7B,2BAAG,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;gCACtE,oBAAC,eAAe,IAAC,IAAI,EAAC,KAAK,GAAG,CAC5B,CACL,CAAC,CAAC,CAAC,IAAI,CACL,CACF,CACN,CAAC,CAAC,CAAC,IAAI,CACT,CACK,CACF,CACJ,CACF;YACL,IAAI,CAAC,WAAW,EAAE,CACf,CACP,CAAC;IACJ,CAAC;CACF;AAED,MAAM,eAAe,GAAG,CAAC,UAAsB,EAAE,EAAE,CAAC,CAAC;IACnD,MAAM,EAAE,UAAU,CAAC,cAAc,CAAC,MAAM;IACxC,UAAU,EAAE,UAAU,CAAC,cAAc,CAAC,OAAO;CAC9C,CAAC,CAAC;AAEH,MAAM,kBAAkB,GAAG,EAAE,YAAY,EAAE,CAAC;AAK5C,eAAe,OAAO,CACpB,eAAe,EACf,kBAAkB,CACnB,CAAC,UAAU,CAAC,CAAC","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { systemHealth } from '../administration.reducer';\nimport HealthModal from './health-modal';\n\nexport interface IHealthPageProps extends StateProps, DispatchProps {}\n\nexport interface IHealthPageState {\n  healthObject: any;\n  showModal: boolean;\n}\n\nexport class HealthPage extends React.Component<IHealthPageProps, IHealthPageState> {\n  state: IHealthPageState = {\n    healthObject: {},\n    showModal: false\n  };\n\n  componentDidMount() {\n    this.props.systemHealth();\n  }\n\n  getSystemHealth = () => {\n    if (!this.props.isFetching) {\n      this.props.systemHealth();\n    }\n  };\n\n  getSystemHealthInfo = (name, healthObject) => () => {\n    this.setState({\n      showModal: true,\n      healthObject: {\n        ...healthObject,\n        name\n      }\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      showModal: false\n    });\n  };\n\n  renderModal = () => {\n    const { healthObject } = this.state;\n    return <HealthModal healthObject={healthObject} handleClose={this.handleClose} showModal={this.state.showModal} />;\n  };\n\n  render() {\n    const { health, isFetching } = this.props;\n    const data = (health || {}).details || {};\n    return (\n      <div>\n        <h2 id=\"health-page-heading\">Health Checks</h2>\n        <p>\n          <Button onClick={this.getSystemHealth} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\n            <FontAwesomeIcon icon=\"sync\" />\n            &nbsp;\n            <Translate component=\"span\" contentKey=\"health.refresh.button\">\n              Refresh\n            </Translate>\n          </Button>\n        </p>\n        <Row>\n          <Col md=\"12\">\n            <Table bordered>\n              <thead>\n                <tr>\n                  <th>Service Name</th>\n                  <th>Status</th>\n                  <th>Details</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.keys(data).map((configPropKey, configPropIndex) =>\n                  configPropKey !== 'status' ? (\n                    <tr key={configPropIndex}>\n                      <td>{configPropKey}</td>\n                      <td>\n                        <Badge color={data[configPropKey].status !== 'UP' ? 'danger' : 'success'}>{data[configPropKey].status}</Badge>\n                      </td>\n                      <td>\n                        {data[configPropKey].details ? (\n                          <a onClick={this.getSystemHealthInfo(configPropKey, data[configPropKey])}>\n                            <FontAwesomeIcon icon=\"eye\" />\n                          </a>\n                        ) : null}\n                      </td>\n                    </tr>\n                  ) : null\n                )}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  health: storeState.administration.health,\n  isFetching: storeState.administration.loading\n});\n\nconst mapDispatchToProps = { systemHealth };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HealthPage);\n"]}]}