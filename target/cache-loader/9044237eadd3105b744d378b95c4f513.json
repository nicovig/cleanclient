{"remainingRequest":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\shared\\layout\\header\\header.tsx","dependencies":[{"path":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\shared\\layout\\header\\header.tsx","mtime":1560524100278},{"path":"C:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import './header.scss';\r\nimport React from 'react';\r\nimport { Translate, Storage } from 'react-jhipster';\r\nimport { Navbar, Nav, NavbarToggler, Collapse } from 'reactstrap';\r\nimport LoadingBar from 'react-redux-loading-bar';\r\nimport { Home, Brand } from './header-components';\r\nimport { AdminMenu, EntitiesMenu, AccountMenu, LocaleMenu } from '../menus';\r\nexport default class Header extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            menuOpen: false\r\n        };\r\n        this.handleLocaleChange = event => {\r\n            const langKey = event.target.value;\r\n            Storage.session.set('locale', langKey);\r\n            this.props.onLocaleChange(langKey);\r\n        };\r\n        this.renderDevRibbon = () => this.props.isInProduction === false ? (React.createElement(\"div\", { className: \"ribbon dev\" },\r\n            React.createElement(\"a\", { href: \"\" },\r\n                React.createElement(Translate, { contentKey: `global.ribbon.${this.props.ribbonEnv}` })))) : null;\r\n        this.toggleMenu = () => {\r\n            this.setState({ menuOpen: !this.state.menuOpen });\r\n        };\r\n    }\r\n    render() {\r\n        const { currentLocale, isAuthenticated, isAdmin, isSwaggerEnabled, isInProduction } = this.props;\r\n        /* jhipster-needle-add-element-to-menu - JHipster will add new menu items here */\r\n        return (React.createElement(\"div\", { id: \"app-header\" },\r\n            this.renderDevRibbon(),\r\n            React.createElement(LoadingBar, { className: \"loading-bar\" }),\r\n            React.createElement(Navbar, { light: true, expand: \"sm\", fixed: \"top\", className: \"bg-light\" },\r\n                React.createElement(NavbarToggler, { \"aria-label\": \"Menu\", onClick: this.toggleMenu }),\r\n                React.createElement(Brand, null),\r\n                React.createElement(Collapse, { isOpen: this.state.menuOpen, navbar: true },\r\n                    React.createElement(Nav, { id: \"header-tabs\", className: \"ml-auto\", navbar: true },\r\n                        React.createElement(Home, null),\r\n                        isAuthenticated && React.createElement(EntitiesMenu, null),\r\n                        isAuthenticated && isAdmin && React.createElement(AdminMenu, { showSwagger: isSwaggerEnabled }),\r\n                        React.createElement(LocaleMenu, { currentLocale: currentLocale, onClick: this.handleLocaleChange }),\r\n                        React.createElement(AccountMenu, { isAuthenticated: isAuthenticated }))))));\r\n    }\r\n}\r\n",{"version":3,"file":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\shared\\layout\\header\\header.tsx","sourceRoot":"","sources":["C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\shared\\layout\\header\\header.tsx"],"names":[],"mappings":"AAAA,OAAO,eAAe,CAAC;AAEvB,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,aAAa,EAAe,QAAQ,EAAE,MAAM,YAAY,CAAC;AAI/E,OAAO,UAAU,MAAM,yBAAyB,CAAC;AAEjD,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAClD,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAgB5E,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,KAAK,CAAC,SAAqC;IAA/E;;QACE,UAAK,GAAiB;YACpB,QAAQ,EAAE,KAAK;SAChB,CAAC;QAEF,uBAAkB,GAAG,KAAK,CAAC,EAAE;YAC3B,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;YACnC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YACvC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC,CAAC;QAEF,oBAAe,GAAG,GAAG,EAAE,CACrB,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,KAAK,CAAC,CAAC,CAAC,CACpC,6BAAK,SAAS,EAAC,YAAY;YACzB,2BAAG,IAAI,EAAC,EAAE;gBACR,oBAAC,SAAS,IAAC,UAAU,EAAE,iBAAiB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,GAAI,CAChE,CACA,CACP,CAAC,CAAC,CAAC,IAAI,CAAC;QAEX,eAAU,GAAG,GAAG,EAAE;YAChB,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QACpD,CAAC,CAAC;IA2BJ,CAAC;IAzBC,MAAM;QACJ,MAAM,EAAE,aAAa,EAAE,eAAe,EAAE,OAAO,EAAE,gBAAgB,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAEjG,iFAAiF;QAEjF,OAAO,CACL,6BAAK,EAAE,EAAC,YAAY;YACjB,IAAI,CAAC,eAAe,EAAE;YACvB,oBAAC,UAAU,IAAC,SAAS,EAAC,aAAa,GAAG;YACtC,oBAAC,MAAM,IAAC,KAAK,QAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,SAAS,EAAC,UAAU;gBACxD,oBAAC,aAAa,kBAAY,MAAM,EAAC,OAAO,EAAE,IAAI,CAAC,UAAU,GAAI;gBAC7D,oBAAC,KAAK,OAAG;gBACT,oBAAC,QAAQ,IAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM;oBAC3C,oBAAC,GAAG,IAAC,EAAE,EAAC,aAAa,EAAC,SAAS,EAAC,SAAS,EAAC,MAAM;wBAC9C,oBAAC,IAAI,OAAG;wBACP,eAAe,IAAI,oBAAC,YAAY,OAAG;wBACnC,eAAe,IAAI,OAAO,IAAI,oBAAC,SAAS,IAAC,WAAW,EAAE,gBAAgB,GAAI;wBAC3E,oBAAC,UAAU,IAAC,aAAa,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,kBAAkB,GAAI;wBAC9E,oBAAC,WAAW,IAAC,eAAe,EAAE,eAAe,GAAI,CAC7C,CACG,CACJ,CACL,CACP,CAAC;IACJ,CAAC;CACF","sourcesContent":["import './header.scss';\r\n\r\nimport React from 'react';\r\nimport { Translate, Storage } from 'react-jhipster';\r\nimport { Navbar, Nav, NavbarToggler, NavbarBrand, Collapse } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { NavLink as Link } from 'react-router-dom';\r\nimport LoadingBar from 'react-redux-loading-bar';\r\n\r\nimport { Home, Brand } from './header-components';\r\nimport { AdminMenu, EntitiesMenu, AccountMenu, LocaleMenu } from '../menus';\r\n\r\nexport interface IHeaderProps {\r\n  isAuthenticated: boolean;\r\n  isAdmin: boolean;\r\n  ribbonEnv: string;\r\n  isInProduction: boolean;\r\n  isSwaggerEnabled: boolean;\r\n  currentLocale: string;\r\n  onLocaleChange: Function;\r\n}\r\n\r\nexport interface IHeaderState {\r\n  menuOpen: boolean;\r\n}\r\n\r\nexport default class Header extends React.Component<IHeaderProps, IHeaderState> {\r\n  state: IHeaderState = {\r\n    menuOpen: false\r\n  };\r\n\r\n  handleLocaleChange = event => {\r\n    const langKey = event.target.value;\r\n    Storage.session.set('locale', langKey);\r\n    this.props.onLocaleChange(langKey);\r\n  };\r\n\r\n  renderDevRibbon = () =>\r\n    this.props.isInProduction === false ? (\r\n      <div className=\"ribbon dev\">\r\n        <a href=\"\">\r\n          <Translate contentKey={`global.ribbon.${this.props.ribbonEnv}`} />\r\n        </a>\r\n      </div>\r\n    ) : null;\r\n\r\n  toggleMenu = () => {\r\n    this.setState({ menuOpen: !this.state.menuOpen });\r\n  };\r\n\r\n  render() {\r\n    const { currentLocale, isAuthenticated, isAdmin, isSwaggerEnabled, isInProduction } = this.props;\r\n\r\n    /* jhipster-needle-add-element-to-menu - JHipster will add new menu items here */\r\n\r\n    return (\r\n      <div id=\"app-header\">\r\n        {this.renderDevRibbon()}\r\n        <LoadingBar className=\"loading-bar\" />\r\n        <Navbar light expand=\"sm\" fixed=\"top\" className=\"bg-light\">\r\n          <NavbarToggler aria-label=\"Menu\" onClick={this.toggleMenu} />\r\n          <Brand />\r\n          <Collapse isOpen={this.state.menuOpen} navbar>\r\n            <Nav id=\"header-tabs\" className=\"ml-auto\" navbar>\r\n              <Home />\r\n              {isAuthenticated && <EntitiesMenu />}\r\n              {isAuthenticated && isAdmin && <AdminMenu showSwagger={isSwaggerEnabled} />}\r\n              <LocaleMenu currentLocale={currentLocale} onClick={this.handleLocaleChange} />\r\n              <AccountMenu isAuthenticated={isAuthenticated} />\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}]}