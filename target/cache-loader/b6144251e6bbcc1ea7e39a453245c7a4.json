{"remainingRequest":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\upload\\upload-modal-choose-column.tsx","dependencies":[{"path":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\upload\\upload-modal-choose-column.tsx","mtime":1563787215348},{"path":"C:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { Modal, Button, ModalHeader, ModalBody, ModalFooter, Row, Col } from 'reactstrap';\r\nimport { Translate } from 'react-jhipster';\r\nimport Select from 'react-select';\r\nimport { UPLOAD_HEADERS, UPLOAD_MODELE } from './upload-constants';\r\nexport class UploadModalChooseColumn extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this._cancelModal = () => {\r\n            this.props.cancelModal();\r\n        };\r\n        this._handleChange = item => selectedOption => {\r\n            if (this.state.columnMapping.findIndex(item1 => item1.modeleColumn === item) === -1) {\r\n                this.setState({ columnMapping: [...this.state.columnMapping, { modeleColumn: item, chosenColumn: selectedOption.value }] });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    columnMapping: [\r\n                        ...this.state.columnMapping.filter(item2 => item2.modeleColumn !== item),\r\n                        { modeleColumn: item, chosenColumn: selectedOption.value }\r\n                    ]\r\n                });\r\n            }\r\n        };\r\n        this._validateColumnChoices = () => {\r\n            this.props.validateColumnChoices(this.state.columnMapping);\r\n        };\r\n        this._smartFind = itemModel => {\r\n            const indexSmart = this.props.columnChoices.findIndex(item => item.Header.toUpperCase()\r\n                .replace('-', '')\r\n                .replace('_', '') === itemModel.toUpperCase());\r\n            if (indexSmart !== -1) {\r\n                return {\r\n                    modeleColumn: itemModel,\r\n                    chosenColumn: this.props.columnChoices[indexSmart].Header\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    modeleColumn: itemModel,\r\n                    chosenColumn: ''\r\n                };\r\n            }\r\n        };\r\n        this.state = {\r\n            modal: false,\r\n            columnMapping: []\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        document.title = 'PrÃ©cisez le mapping des colonnes';\r\n        const smartMapping = UPLOAD_HEADERS.map(item => {\r\n            const mapping = this._smartFind(item);\r\n            return mapping;\r\n        });\r\n        this.setState({ columnMapping: smartMapping });\r\n    }\r\n    _getValueForSelect(item) {\r\n        const index = this.state.columnMapping.findIndex(item1 => item1.modeleColumn === item);\r\n        if (index === -1) {\r\n            return {\r\n                value: '',\r\n                label: ''\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                value: this.state.columnMapping[index].chosenColumn,\r\n                label: this.state.columnMapping[index].chosenColumn\r\n            };\r\n        }\r\n    }\r\n    render() {\r\n        const { columnChoices } = this.props;\r\n        const options = columnChoices.map(item => {\r\n            return {\r\n                label: item.Header,\r\n                value: item.Header\r\n            };\r\n        });\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Modal, { isOpen: this.props.excelSheetsChosen !== '' && this.props.columnChoices.length > 0, toggle: this._cancelModal },\r\n                React.createElement(ModalHeader, { toggle: this._cancelModal },\r\n                    React.createElement(Translate, { contentKey: \"upload.modal-column.title\" }, \"Import your B to B Customers excel file\")),\r\n                React.createElement(ModalBody, null, UPLOAD_HEADERS.map((item, i) => (React.createElement(\"div\", { key: `item-${i}` },\r\n                    React.createElement(Row, null,\r\n                        React.createElement(Col, { md: \"6\" },\r\n                            item,\r\n                            \" ( ex : \",\r\n                            UPLOAD_MODELE[0][item],\r\n                            \" )\"),\r\n                        React.createElement(Col, { md: \"6\" },\r\n                            React.createElement(Select, { onChange: this._handleChange(item), options: options, value: this._getValueForSelect(item) }))),\r\n                    React.createElement(\"br\", null))))),\r\n                React.createElement(ModalFooter, null,\r\n                    React.createElement(Button, { color: \"primary\", onClick: this._validateColumnChoices }, \"Valider mon choix\")))));\r\n    }\r\n}\r\n",{"version":3,"file":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\upload\\upload-modal-choose-column.tsx","sourceRoot":"","sources":["C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\upload\\upload-modal-choose-column.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Modal, Button, ModalHeader, ModalBody, ModalFooter, ButtonGroup, Row, Col } from 'reactstrap';\r\nimport { Translate } from 'react-jhipster';\r\nimport Select from 'react-select';\r\nimport { UPLOAD_HEADERS, UPLOAD_MODELE } from './upload-constants';\r\n\r\nexport interface IUploadModalChooseColumnState {\r\n  modal: boolean;\r\n  columnMapping: Array<{ modeleColumn: string; chosenColumn: string }>;\r\n}\r\n\r\nexport interface IUploadModalChooseColumnProp {\r\n  excelWorkbook: any;\r\n  cancelModal;\r\n  columnChoices: Array<{ Header: string; accessor: string }>;\r\n  validateColumnChoices;\r\n  excelSheetsChosen: string;\r\n}\r\n\r\nexport class UploadModalChooseColumn extends React.Component<IUploadModalChooseColumnProp, IUploadModalChooseColumnState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false,\r\n      columnMapping: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = 'PrÃ©cisez le mapping des colonnes';\r\n    const smartMapping = UPLOAD_HEADERS.map(item => {\r\n      const mapping = this._smartFind(item);\r\n      return mapping;\r\n    });\r\n    this.setState({ columnMapping: smartMapping });\r\n  }\r\n\r\n  _cancelModal = () => {\r\n    this.props.cancelModal();\r\n  };\r\n\r\n  _handleChange = item => selectedOption => {\r\n    if (this.state.columnMapping.findIndex(item1 => item1.modeleColumn === item) === -1) {\r\n      this.setState({ columnMapping: [...this.state.columnMapping, { modeleColumn: item, chosenColumn: selectedOption.value }] });\r\n    } else {\r\n      this.setState({\r\n        columnMapping: [\r\n          ...this.state.columnMapping.filter(item2 => item2.modeleColumn !== item),\r\n          { modeleColumn: item, chosenColumn: selectedOption.value }\r\n        ]\r\n      });\r\n    }\r\n  };\r\n\r\n  _validateColumnChoices = () => {\r\n    this.props.validateColumnChoices(this.state.columnMapping);\r\n  };\r\n\r\n  _smartFind = itemModel => {\r\n    const indexSmart = this.props.columnChoices.findIndex(\r\n      item =>\r\n        item.Header.toUpperCase()\r\n          .replace('-', '')\r\n          .replace('_', '') === itemModel.toUpperCase()\r\n    );\r\n    if (indexSmart !== -1) {\r\n      return {\r\n        modeleColumn: itemModel,\r\n        chosenColumn: this.props.columnChoices[indexSmart].Header\r\n      };\r\n    } else {\r\n      return {\r\n        modeleColumn: itemModel,\r\n        chosenColumn: ''\r\n      };\r\n    }\r\n  };\r\n\r\n  _getValueForSelect(item) {\r\n    const index = this.state.columnMapping.findIndex(item1 => item1.modeleColumn === item);\r\n    if (index === -1) {\r\n      return {\r\n        value: '',\r\n        label: ''\r\n      };\r\n    } else {\r\n      return {\r\n        value: this.state.columnMapping[index].chosenColumn,\r\n        label: this.state.columnMapping[index].chosenColumn\r\n      };\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { columnChoices } = this.props;\r\n    const options = columnChoices.map(item => {\r\n      return {\r\n        label: item.Header,\r\n        value: item.Header\r\n      };\r\n    });\r\n    return (\r\n      <div>\r\n        <Modal isOpen={this.props.excelSheetsChosen !== '' && this.props.columnChoices.length > 0} toggle={this._cancelModal}>\r\n          <ModalHeader toggle={this._cancelModal}>\r\n            <Translate contentKey=\"upload.modal-column.title\">Import your B to B Customers excel file</Translate>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            {UPLOAD_HEADERS.map((item, i) => (\r\n              <div key={`item-${i}`}>\r\n                <Row>\r\n                  <Col md=\"6\">\r\n                    {item} ( ex : {UPLOAD_MODELE[0][item]} )\r\n                  </Col>\r\n                  <Col md=\"6\">\r\n                    <Select onChange={this._handleChange(item)} options={options} value={this._getValueForSelect(item)} />\r\n                  </Col>\r\n                </Row>\r\n                <br />\r\n              </div>\r\n            ))}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"primary\" onClick={this._validateColumnChoices}>\r\n              Valider mon choix\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}]}