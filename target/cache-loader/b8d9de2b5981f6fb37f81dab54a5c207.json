{"remainingRequest":"c:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!c:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!c:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!c:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-ligne\\import-ligne-update.tsx","dependencies":[{"path":"c:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-ligne\\import-ligne-update.tsx","mtime":1560262739691},{"path":"c:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"c:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"c:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { Translate } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntities as getImportFichiers } from 'app/entities/import-fichier/import-fichier.reducer';\r\nimport { getEntity, updateEntity, createEntity, reset } from './import-ligne.reducer';\r\nexport class ImportLigneUpdate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.saveEntity = (event, errors, values) => {\r\n            if (errors.length === 0) {\r\n                const { importLigneEntity } = this.props;\r\n                const entity = Object.assign({}, importLigneEntity, values);\r\n                if (this.state.isNew) {\r\n                    this.props.createEntity(entity);\r\n                }\r\n                else {\r\n                    this.props.updateEntity(entity);\r\n                }\r\n            }\r\n        };\r\n        this.handleClose = () => {\r\n            this.props.history.push('/entity/import-ligne');\r\n        };\r\n        this.state = {\r\n            importFichierId: '0',\r\n            isNew: !this.props.match.params || !this.props.match.params.id\r\n        };\r\n    }\r\n    componentWillUpdate(nextProps, nextState) {\r\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n            this.handleClose();\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (this.state.isNew) {\r\n            this.props.reset();\r\n        }\r\n        else {\r\n            this.props.getEntity(this.props.match.params.id);\r\n        }\r\n        this.props.getImportFichiers();\r\n    }\r\n    render() {\r\n        const { importLigneEntity, importFichiers, loading, updating } = this.props;\r\n        const { isNew } = this.state;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", { id: \"cleanclientApp.importLigne.home.createOrEditLabel\" },\r\n                        React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.home.createOrEditLabel\" }, \"Create or edit a ImportLigne\")))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : importLigneEntity, onSubmit: this.saveEntity },\r\n                    !isNew ? (React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"import-ligne-id\" },\r\n                            React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\")),\r\n                        React.createElement(AvInput, { id: \"import-ligne-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"nomLabel\", for: \"import-ligne-nom\" },\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.nom\" }, \"Nom\")),\r\n                        React.createElement(AvField, { id: \"import-ligne-nom\", type: \"text\", name: \"nom\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"adresseLabel\", for: \"import-ligne-adresse\" },\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.adresse\" }, \"Adresse\")),\r\n                        React.createElement(AvField, { id: \"import-ligne-adresse\", type: \"text\", name: \"adresse\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"cpLabel\", for: \"import-ligne-cp\" },\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.cp\" }, \"Cp\")),\r\n                        React.createElement(AvField, { id: \"import-ligne-cp\", type: \"text\", name: \"cp\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"villeLabel\", for: \"import-ligne-ville\" },\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.ville\" }, \"Ville\")),\r\n                        React.createElement(AvField, { id: \"import-ligne-ville\", type: \"text\", name: \"ville\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"siretLabel\", for: \"import-ligne-siret\" },\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.siret\" }, \"Siret\")),\r\n                        React.createElement(AvField, { id: \"import-ligne-siret\", type: \"text\", name: \"siret\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"import-ligne-importFichier\" },\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.importFichier\" }, \"Import Fichier\")),\r\n                        React.createElement(AvInput, { id: \"import-ligne-importFichier\", type: \"select\", className: \"form-control\", name: \"importFichier.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            importFichiers\r\n                                ? importFichiers.map(otherEntity => (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.id)))\r\n                                : null)),\r\n                    React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/entity/import-ligne\", replace: true, color: \"info\" },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                            React.createElement(Translate, { contentKey: \"entity.action.back\" }, \"Back\"))),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(Translate, { contentKey: \"entity.action.save\" }, \"Save\"))))))));\r\n    }\r\n}\r\nconst mapStateToProps = (storeState) => ({\r\n    importFichiers: storeState.importFichier.entities,\r\n    importLigneEntity: storeState.importLigne.entity,\r\n    loading: storeState.importLigne.loading,\r\n    updating: storeState.importLigne.updating,\r\n    updateSuccess: storeState.importLigne.updateSuccess\r\n});\r\nconst mapDispatchToProps = {\r\n    getImportFichiers,\r\n    getEntity,\r\n    updateEntity,\r\n    createEntity,\r\n    reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ImportLigneUpdate);\r\n",{"version":3,"file":"c:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-ligne\\import-ligne-update.tsx","sourceRoot":"","sources":["c:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!c:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-ligne\\import-ligne-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Row, Col, Label } from 'reactstrap';\nimport { AvFeedback, AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, translate, ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IRootState } from 'app/shared/reducers';\n\nimport { IImportFichier } from 'app/shared/model/import-fichier.model';\nimport { getEntities as getImportFichiers } from 'app/entities/import-fichier/import-fichier.reducer';\nimport { getEntity, updateEntity, createEntity, reset } from './import-ligne.reducer';\nimport { IImportLigne } from 'app/shared/model/import-ligne.model';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';\nimport { mapIdList } from 'app/shared/util/entity-utils';\n\nexport interface IImportLigneUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n\nexport interface IImportLigneUpdateState {\n  isNew: boolean;\n  importFichierId: string;\n}\n\nexport class ImportLigneUpdate extends React.Component<IImportLigneUpdateProps, IImportLigneUpdateState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      importFichierId: '0',\n      isNew: !this.props.match.params || !this.props.match.params.id\n    };\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\n      this.handleClose();\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.isNew) {\n      this.props.reset();\n    } else {\n      this.props.getEntity(this.props.match.params.id);\n    }\n\n    this.props.getImportFichiers();\n  }\n\n  saveEntity = (event, errors, values) => {\n    if (errors.length === 0) {\n      const { importLigneEntity } = this.props;\n      const entity = {\n        ...importLigneEntity,\n        ...values\n      };\n\n      if (this.state.isNew) {\n        this.props.createEntity(entity);\n      } else {\n        this.props.updateEntity(entity);\n      }\n    }\n  };\n\n  handleClose = () => {\n    this.props.history.push('/entity/import-ligne');\n  };\n\n  render() {\n    const { importLigneEntity, importFichiers, loading, updating } = this.props;\n    const { isNew } = this.state;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2 id=\"cleanclientApp.importLigne.home.createOrEditLabel\">\n              <Translate contentKey=\"cleanclientApp.importLigne.home.createOrEditLabel\">Create or edit a ImportLigne</Translate>\n            </h2>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <AvForm model={isNew ? {} : importLigneEntity} onSubmit={this.saveEntity}>\n                {!isNew ? (\n                  <AvGroup>\n                    <Label for=\"import-ligne-id\">\n                      <Translate contentKey=\"global.field.id\">ID</Translate>\n                    </Label>\n                    <AvInput id=\"import-ligne-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\n                  </AvGroup>\n                ) : null}\n                <AvGroup>\n                  <Label id=\"nomLabel\" for=\"import-ligne-nom\">\n                    <Translate contentKey=\"cleanclientApp.importLigne.nom\">Nom</Translate>\n                  </Label>\n                  <AvField id=\"import-ligne-nom\" type=\"text\" name=\"nom\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"adresseLabel\" for=\"import-ligne-adresse\">\n                    <Translate contentKey=\"cleanclientApp.importLigne.adresse\">Adresse</Translate>\n                  </Label>\n                  <AvField id=\"import-ligne-adresse\" type=\"text\" name=\"adresse\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"cpLabel\" for=\"import-ligne-cp\">\n                    <Translate contentKey=\"cleanclientApp.importLigne.cp\">Cp</Translate>\n                  </Label>\n                  <AvField id=\"import-ligne-cp\" type=\"text\" name=\"cp\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"villeLabel\" for=\"import-ligne-ville\">\n                    <Translate contentKey=\"cleanclientApp.importLigne.ville\">Ville</Translate>\n                  </Label>\n                  <AvField id=\"import-ligne-ville\" type=\"text\" name=\"ville\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"siretLabel\" for=\"import-ligne-siret\">\n                    <Translate contentKey=\"cleanclientApp.importLigne.siret\">Siret</Translate>\n                  </Label>\n                  <AvField id=\"import-ligne-siret\" type=\"text\" name=\"siret\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"import-ligne-importFichier\">\n                    <Translate contentKey=\"cleanclientApp.importLigne.importFichier\">Import Fichier</Translate>\n                  </Label>\n                  <AvInput id=\"import-ligne-importFichier\" type=\"select\" className=\"form-control\" name=\"importFichier.id\">\n                    <option value=\"\" key=\"0\" />\n                    {importFichiers\n                      ? importFichiers.map(otherEntity => (\n                          <option value={otherEntity.id} key={otherEntity.id}>\n                            {otherEntity.id}\n                          </option>\n                        ))\n                      : null}\n                  </AvInput>\n                </AvGroup>\n                <Button tag={Link} id=\"cancel-save\" to=\"/entity/import-ligne\" replace color=\"info\">\n                  <FontAwesomeIcon icon=\"arrow-left\" />\n                  &nbsp;\n                  <span className=\"d-none d-md-inline\">\n                    <Translate contentKey=\"entity.action.back\">Back</Translate>\n                  </span>\n                </Button>\n                &nbsp;\n                <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\n                  <FontAwesomeIcon icon=\"save\" />\n                  &nbsp;\n                  <Translate contentKey=\"entity.action.save\">Save</Translate>\n                </Button>\n              </AvForm>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  importFichiers: storeState.importFichier.entities,\n  importLigneEntity: storeState.importLigne.entity,\n  loading: storeState.importLigne.loading,\n  updating: storeState.importLigne.updating,\n  updateSuccess: storeState.importLigne.updateSuccess\n});\n\nconst mapDispatchToProps = {\n  getImportFichiers,\n  getEntity,\n  updateEntity,\n  createEntity,\n  reset\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ImportLigneUpdate);\n"]}]}