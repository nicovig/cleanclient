{"remainingRequest":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-ligne\\import-ligne.tsx","dependencies":[{"path":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-ligne\\import-ligne.tsx","mtime":1563530778231},{"path":"C:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Table } from 'reactstrap';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { Translate } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntities } from './import-ligne.reducer';\r\nexport class ImportLigne extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getEntities();\r\n    }\r\n    render() {\r\n        const { importLigneList, match } = this.props;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"h2\", { id: \"import-ligne-heading\" },\r\n                React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.home.title\" }, \"Import Lignes\"),\r\n                React.createElement(Link, { to: `${match.url}/new`, className: \"btn btn-primary float-right jh-create-entity\", id: \"jh-create-entity\" },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"plus\" }),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.home.createLabel\" }, \"Create new Import Ligne\"))),\r\n            React.createElement(\"div\", { className: \"table-responsive\" }, importLigneList && importLigneList.length > 0 ? (React.createElement(Table, { responsive: true },\r\n                React.createElement(\"thead\", null,\r\n                    React.createElement(\"tr\", null,\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.statut\" }, \"Statut\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.matchingMethod\" }, \"Matching Method\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.idExterne\" }, \"Id Externe\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.nom\" }, \"Nom\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.adresse\" }, \"Adresse\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.cp\" }, \"Cp\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.ville\" }, \"Ville\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.siret\" }, \"Siret\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.geolocScore\" }, \"Geoloc Score\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.geolocLabel\" }, \"Geoloc Label\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.geolocHousenumber\" }, \"Geoloc Housenumber\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.geolocStreet\" }, \"Geoloc Street\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.geolocPostcode\" }, \"Geoloc Postcode\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.geolocCity\" }, \"Geoloc City\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.geolocLatitude\" }, \"Geoloc Latitude\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.geolocLongitude\" }, \"Geoloc Longitude\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.sireneSiret\" }, \"Sirene Siret\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.sireneDenomination\" }, \"Sirene Denomination\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.sireneHousenumber\" }, \"Sirene Housenumber\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.sireneStreet\" }, \"Sirene Street\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.sireneCodepostal\" }, \"Sirene Codepostal\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.sireneVille\" }, \"Sirene Ville\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.sireneLatitude\" }, \"Sirene Latitude\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.sireneLongitude\" }, \"Sirene Longitude\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.sireneEtatadministratif\" }, \"Sirene Etatadministratif\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.sireneNomenclature\" }, \"Sirene Nomenclature\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.sireneTrancheeffectif\" }, \"Sirene Trancheeffectif\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.elasticScore\" }, \"Elastic Score\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.importFichier\" }, \"Import Fichier\")),\r\n                        React.createElement(\"th\", null))),\r\n                React.createElement(\"tbody\", null, importLigneList.map((importLigne, i) => (React.createElement(\"tr\", { key: `entity-${i}` },\r\n                    React.createElement(\"td\", null,\r\n                        React.createElement(Button, { tag: Link, to: `${match.url}/${importLigne.id}`, color: \"link\", size: \"sm\" }, importLigne.id)),\r\n                    React.createElement(\"td\", null, importLigne.statut),\r\n                    React.createElement(\"td\", null, importLigne.matchingMethod),\r\n                    React.createElement(\"td\", null, importLigne.idExterne),\r\n                    React.createElement(\"td\", null, importLigne.nom),\r\n                    React.createElement(\"td\", null, importLigne.adresse),\r\n                    React.createElement(\"td\", null, importLigne.cp),\r\n                    React.createElement(\"td\", null, importLigne.ville),\r\n                    React.createElement(\"td\", null, importLigne.siret),\r\n                    React.createElement(\"td\", null, importLigne.geolocScore),\r\n                    React.createElement(\"td\", null, importLigne.geolocLabel),\r\n                    React.createElement(\"td\", null, importLigne.geolocHousenumber),\r\n                    React.createElement(\"td\", null, importLigne.geolocStreet),\r\n                    React.createElement(\"td\", null, importLigne.geolocPostcode),\r\n                    React.createElement(\"td\", null, importLigne.geolocCity),\r\n                    React.createElement(\"td\", null, importLigne.geolocLatitude),\r\n                    React.createElement(\"td\", null, importLigne.geolocLongitude),\r\n                    React.createElement(\"td\", null, importLigne.sireneSiret),\r\n                    React.createElement(\"td\", null, importLigne.sireneDenomination),\r\n                    React.createElement(\"td\", null, importLigne.sireneHousenumber),\r\n                    React.createElement(\"td\", null, importLigne.sireneStreet),\r\n                    React.createElement(\"td\", null, importLigne.sireneCodepostal),\r\n                    React.createElement(\"td\", null, importLigne.sireneVille),\r\n                    React.createElement(\"td\", null, importLigne.sireneLatitude),\r\n                    React.createElement(\"td\", null, importLigne.sireneLongitude),\r\n                    React.createElement(\"td\", null, importLigne.sireneEtatadministratif),\r\n                    React.createElement(\"td\", null, importLigne.sireneNomenclature),\r\n                    React.createElement(\"td\", null, importLigne.sireneTrancheeffectif),\r\n                    React.createElement(\"td\", null, importLigne.elasticScore),\r\n                    React.createElement(\"td\", null, importLigne.importFichier ? (React.createElement(Link, { to: `import-fichier/${importLigne.importFichier.id}` }, importLigne.importFichier.id)) : ('')),\r\n                    React.createElement(\"td\", { className: \"text-right\" },\r\n                        React.createElement(\"div\", { className: \"btn-group flex-btn-group-container\" },\r\n                            React.createElement(Button, { tag: Link, to: `${match.url}/${importLigne.id}`, color: \"info\", size: \"sm\" },\r\n                                React.createElement(FontAwesomeIcon, { icon: \"eye\" }),\r\n                                ' ',\r\n                                React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                                    React.createElement(Translate, { contentKey: \"entity.action.view\" }, \"View\"))),\r\n                            React.createElement(Button, { tag: Link, to: `${match.url}/${importLigne.id}/edit`, color: \"primary\", size: \"sm\" },\r\n                                React.createElement(FontAwesomeIcon, { icon: \"pencil-alt\" }),\r\n                                ' ',\r\n                                React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                                    React.createElement(Translate, { contentKey: \"entity.action.edit\" }, \"Edit\"))),\r\n                            React.createElement(Button, { tag: Link, to: `${match.url}/${importLigne.id}/delete`, color: \"danger\", size: \"sm\" },\r\n                                React.createElement(FontAwesomeIcon, { icon: \"trash\" }),\r\n                                ' ',\r\n                                React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                                    React.createElement(Translate, { contentKey: \"entity.action.delete\" }, \"Delete\"))))))))))) : (React.createElement(\"div\", { className: \"alert alert-warning\" },\r\n                React.createElement(Translate, { contentKey: \"cleanclientApp.importLigne.home.notFound\" }, \"No Import Lignes found\"))))));\r\n    }\r\n}\r\nconst mapStateToProps = ({ importLigne }) => ({\r\n    importLigneList: importLigne.entities\r\n});\r\nconst mapDispatchToProps = {\r\n    getEntities\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ImportLigne);\r\n",{"version":3,"file":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-ligne\\import-ligne.tsx","sourceRoot":"","sources":["C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\entities\\import-ligne\\import-ligne.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Col, Row, Table } from 'reactstrap';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { Translate, ICrudGetAllAction } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getEntities } from './import-ligne.reducer';\r\nimport { IImportLigne } from 'app/shared/model/import-ligne.model';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';\r\n\r\nexport interface IImportLigneProps extends StateProps, DispatchProps, RouteComponentProps<{ url: string }> {}\r\n\r\nexport class ImportLigne extends React.Component<IImportLigneProps> {\r\n  componentDidMount() {\r\n    this.props.getEntities();\r\n  }\r\n\r\n  render() {\r\n    const { importLigneList, match } = this.props;\r\n    return (\r\n      <div>\r\n        <h2 id=\"import-ligne-heading\">\r\n          <Translate contentKey=\"cleanclientApp.importLigne.home.title\">Import Lignes</Translate>\r\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\" id=\"jh-create-entity\">\r\n            <FontAwesomeIcon icon=\"plus\" />\r\n            &nbsp;\r\n            <Translate contentKey=\"cleanclientApp.importLigne.home.createLabel\">Create new Import Ligne</Translate>\r\n          </Link>\r\n        </h2>\r\n        <div className=\"table-responsive\">\r\n          {importLigneList && importLigneList.length > 0 ? (\r\n            <Table responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th>\r\n                    <Translate contentKey=\"global.field.id\">ID</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.statut\">Statut</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.matchingMethod\">Matching Method</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.idExterne\">Id Externe</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.nom\">Nom</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.adresse\">Adresse</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.cp\">Cp</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.ville\">Ville</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.siret\">Siret</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.geolocScore\">Geoloc Score</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.geolocLabel\">Geoloc Label</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.geolocHousenumber\">Geoloc Housenumber</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.geolocStreet\">Geoloc Street</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.geolocPostcode\">Geoloc Postcode</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.geolocCity\">Geoloc City</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.geolocLatitude\">Geoloc Latitude</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.geolocLongitude\">Geoloc Longitude</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.sireneSiret\">Sirene Siret</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.sireneDenomination\">Sirene Denomination</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.sireneHousenumber\">Sirene Housenumber</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.sireneStreet\">Sirene Street</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.sireneCodepostal\">Sirene Codepostal</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.sireneVille\">Sirene Ville</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.sireneLatitude\">Sirene Latitude</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.sireneLongitude\">Sirene Longitude</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.sireneEtatadministratif\">Sirene Etatadministratif</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.sireneNomenclature\">Sirene Nomenclature</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.sireneTrancheeffectif\">Sirene Trancheeffectif</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.elasticScore\">Elastic Score</Translate>\r\n                  </th>\r\n                  <th>\r\n                    <Translate contentKey=\"cleanclientApp.importLigne.importFichier\">Import Fichier</Translate>\r\n                  </th>\r\n                  <th />\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {importLigneList.map((importLigne, i) => (\r\n                  <tr key={`entity-${i}`}>\r\n                    <td>\r\n                      <Button tag={Link} to={`${match.url}/${importLigne.id}`} color=\"link\" size=\"sm\">\r\n                        {importLigne.id}\r\n                      </Button>\r\n                    </td>\r\n                    <td>{importLigne.statut}</td>\r\n                    <td>{importLigne.matchingMethod}</td>\r\n                    <td>{importLigne.idExterne}</td>\r\n                    <td>{importLigne.nom}</td>\r\n                    <td>{importLigne.adresse}</td>\r\n                    <td>{importLigne.cp}</td>\r\n                    <td>{importLigne.ville}</td>\r\n                    <td>{importLigne.siret}</td>\r\n                    <td>{importLigne.geolocScore}</td>\r\n                    <td>{importLigne.geolocLabel}</td>\r\n                    <td>{importLigne.geolocHousenumber}</td>\r\n                    <td>{importLigne.geolocStreet}</td>\r\n                    <td>{importLigne.geolocPostcode}</td>\r\n                    <td>{importLigne.geolocCity}</td>\r\n                    <td>{importLigne.geolocLatitude}</td>\r\n                    <td>{importLigne.geolocLongitude}</td>\r\n                    <td>{importLigne.sireneSiret}</td>\r\n                    <td>{importLigne.sireneDenomination}</td>\r\n                    <td>{importLigne.sireneHousenumber}</td>\r\n                    <td>{importLigne.sireneStreet}</td>\r\n                    <td>{importLigne.sireneCodepostal}</td>\r\n                    <td>{importLigne.sireneVille}</td>\r\n                    <td>{importLigne.sireneLatitude}</td>\r\n                    <td>{importLigne.sireneLongitude}</td>\r\n                    <td>{importLigne.sireneEtatadministratif}</td>\r\n                    <td>{importLigne.sireneNomenclature}</td>\r\n                    <td>{importLigne.sireneTrancheeffectif}</td>\r\n                    <td>{importLigne.elasticScore}</td>\r\n                    <td>\r\n                      {importLigne.importFichier ? (\r\n                        <Link to={`import-fichier/${importLigne.importFichier.id}`}>{importLigne.importFichier.id}</Link>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <div className=\"btn-group flex-btn-group-container\">\r\n                        <Button tag={Link} to={`${match.url}/${importLigne.id}`} color=\"info\" size=\"sm\">\r\n                          <FontAwesomeIcon icon=\"eye\" />{' '}\r\n                          <span className=\"d-none d-md-inline\">\r\n                            <Translate contentKey=\"entity.action.view\">View</Translate>\r\n                          </span>\r\n                        </Button>\r\n                        <Button tag={Link} to={`${match.url}/${importLigne.id}/edit`} color=\"primary\" size=\"sm\">\r\n                          <FontAwesomeIcon icon=\"pencil-alt\" />{' '}\r\n                          <span className=\"d-none d-md-inline\">\r\n                            <Translate contentKey=\"entity.action.edit\">Edit</Translate>\r\n                          </span>\r\n                        </Button>\r\n                        <Button tag={Link} to={`${match.url}/${importLigne.id}/delete`} color=\"danger\" size=\"sm\">\r\n                          <FontAwesomeIcon icon=\"trash\" />{' '}\r\n                          <span className=\"d-none d-md-inline\">\r\n                            <Translate contentKey=\"entity.action.delete\">Delete</Translate>\r\n                          </span>\r\n                        </Button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          ) : (\r\n            <div className=\"alert alert-warning\">\r\n              <Translate contentKey=\"cleanclientApp.importLigne.home.notFound\">No Import Lignes found</Translate>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ importLigne }: IRootState) => ({\r\n  importLigneList: importLigne.entities\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getEntities\r\n};\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ImportLigne);\r\n"]}]}