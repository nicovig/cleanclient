{"remainingRequest":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management.tsx","dependencies":[{"path":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management.tsx","mtime":1560254031008},{"path":"C:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Table, Row, Badge } from 'reactstrap';\r\nimport { Translate, TextFormat, JhiPagination, getPaginationItemsNumber, getSortState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { APP_DATE_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\nimport { getUsers, updateUser } from './user-management.reducer';\r\nexport class UserManagement extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = Object.assign({}, getSortState(this.props.location, ITEMS_PER_PAGE));\r\n        this.sort = prop => () => {\r\n            this.setState({\r\n                order: this.state.order === 'asc' ? 'desc' : 'asc',\r\n                sort: prop\r\n            }, () => this.sortUsers());\r\n        };\r\n        this.handlePagination = activePage => this.setState({ activePage }, () => this.sortUsers());\r\n        this.getUsers = () => {\r\n            const { activePage, itemsPerPage, sort, order } = this.state;\r\n            this.props.getUsers(activePage - 1, itemsPerPage, `${sort},${order}`);\r\n        };\r\n        this.toggleActive = user => () => {\r\n            this.props.updateUser(Object.assign({}, user, { activated: !user.activated }));\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.getUsers();\r\n    }\r\n    sortUsers() {\r\n        this.getUsers();\r\n        this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\r\n    }\r\n    render() {\r\n        const { users, account, match, totalItems } = this.props;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"h2\", { id: \"user-management-page-heading\" },\r\n                React.createElement(Translate, { contentKey: \"userManagement.home.title\" }, \"Users\"),\r\n                React.createElement(Link, { to: `${match.url}/new`, className: \"btn btn-primary float-right jh-create-entity\" },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"plus\" }),\r\n                    \" \",\r\n                    React.createElement(Translate, { contentKey: \"userManagement.home.createLabel\" }, \"Create a new user\"))),\r\n            React.createElement(Table, { responsive: true, striped: true },\r\n                React.createElement(\"thead\", null,\r\n                    React.createElement(\"tr\", null,\r\n                        React.createElement(\"th\", { className: \"hand\", onClick: this.sort('id') },\r\n                            React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\"),\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", { className: \"hand\", onClick: this.sort('login') },\r\n                            React.createElement(Translate, { contentKey: \"userManagement.login\" }, \"Login\"),\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", { className: \"hand\", onClick: this.sort('email') },\r\n                            React.createElement(Translate, { contentKey: \"userManagement.email\" }, \"Email\"),\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", null),\r\n                        React.createElement(\"th\", { className: \"hand\", onClick: this.sort('langKey') },\r\n                            React.createElement(Translate, { contentKey: \"userManagement.langKey\" }, \"Lang Key\"),\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(Translate, { contentKey: \"userManagement.profiles\" }, \"Profiles\")),\r\n                        React.createElement(\"th\", { className: \"hand\", onClick: this.sort('createdDate') },\r\n                            React.createElement(Translate, { contentKey: \"userManagement.createdDate\" }, \"Created Date\"),\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", { className: \"hand\", onClick: this.sort('lastModifiedBy') },\r\n                            React.createElement(Translate, { contentKey: \"userManagement.lastModifiedBy\" }, \"Last Modified By\"),\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", { id: \"modified-date-sort\", className: \"hand\", onClick: this.sort('lastModifiedDate') },\r\n                            React.createElement(Translate, { contentKey: \"userManagement.lastModifiedDate\" }, \"Last Modified Date\"),\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", null))),\r\n                React.createElement(\"tbody\", null, users.map((user, i) => (React.createElement(\"tr\", { id: user.login, key: `user-${i}` },\r\n                    React.createElement(\"td\", null,\r\n                        React.createElement(Button, { tag: Link, to: `${match.url}/${user.login}`, color: \"link\", size: \"sm\" }, user.id)),\r\n                    React.createElement(\"td\", null, user.login),\r\n                    React.createElement(\"td\", null, user.email),\r\n                    React.createElement(\"td\", null, user.activated ? (React.createElement(Button, { color: \"success\", onClick: this.toggleActive(user) }, \"Activated\")) : (React.createElement(Button, { color: \"danger\", onClick: this.toggleActive(user) }, \"Deactivated\"))),\r\n                    React.createElement(\"td\", null, user.langKey),\r\n                    React.createElement(\"td\", null, user.authorities\r\n                        ? user.authorities.map((authority, j) => (React.createElement(\"div\", { key: `user-auth-${i}-${j}` },\r\n                            React.createElement(Badge, { color: \"info\" }, authority))))\r\n                        : null),\r\n                    React.createElement(\"td\", null,\r\n                        React.createElement(TextFormat, { value: user.createdDate, type: \"date\", format: APP_DATE_FORMAT, blankOnInvalid: true })),\r\n                    React.createElement(\"td\", null, user.lastModifiedBy),\r\n                    React.createElement(\"td\", null,\r\n                        React.createElement(TextFormat, { value: user.lastModifiedDate, type: \"date\", format: APP_DATE_FORMAT, blankOnInvalid: true })),\r\n                    React.createElement(\"td\", { className: \"text-right\" },\r\n                        React.createElement(\"div\", { className: \"btn-group flex-btn-group-container\" },\r\n                            React.createElement(Button, { tag: Link, to: `${match.url}/${user.login}`, color: \"info\", size: \"sm\" },\r\n                                React.createElement(FontAwesomeIcon, { icon: \"eye\" }),\r\n                                ' ',\r\n                                React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                                    React.createElement(Translate, { contentKey: \"entity.action.view\" }, \"View\"))),\r\n                            React.createElement(Button, { tag: Link, to: `${match.url}/${user.login}/edit`, color: \"primary\", size: \"sm\" },\r\n                                React.createElement(FontAwesomeIcon, { icon: \"pencil-alt\" }),\r\n                                ' ',\r\n                                React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                                    React.createElement(Translate, { contentKey: \"entity.action.edit\" }, \"Edit\"))),\r\n                            React.createElement(Button, { tag: Link, to: `${match.url}/${user.login}/delete`, color: \"danger\", size: \"sm\", disabled: account.login === user.login },\r\n                                React.createElement(FontAwesomeIcon, { icon: \"trash\" }),\r\n                                ' ',\r\n                                React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                                    React.createElement(Translate, { contentKey: \"entity.action.delete\" }, \"Delete\")))))))))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(JhiPagination, { items: getPaginationItemsNumber(totalItems, this.state.itemsPerPage), activePage: this.state.activePage, onSelect: this.handlePagination, maxButtons: 5 }))));\r\n    }\r\n}\r\nconst mapStateToProps = (storeState) => ({\r\n    users: storeState.userManagement.users,\r\n    totalItems: storeState.userManagement.totalItems,\r\n    account: storeState.authentication.account\r\n});\r\nconst mapDispatchToProps = { getUsers, updateUser };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagement);\r\n",{"version":3,"file":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management.tsx","sourceRoot":"","sources":["C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Table, Row, Badge } from 'reactstrap';\nimport {\n  Translate,\n  ICrudGetAllAction,\n  ICrudPutAction,\n  TextFormat,\n  JhiPagination,\n  getPaginationItemsNumber,\n  getSortState,\n  IPaginationBaseState\n} from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_DATE_FORMAT } from 'app/config/constants';\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\nimport { getUsers, updateUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\n\nexport class UserManagement extends React.Component<IUserManagementProps, IPaginationBaseState> {\n  state: IPaginationBaseState = {\n    ...getSortState(this.props.location, ITEMS_PER_PAGE)\n  };\n\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  sort = prop => () => {\n    this.setState(\n      {\n        order: this.state.order === 'asc' ? 'desc' : 'asc',\n        sort: prop\n      },\n      () => this.sortUsers()\n    );\n  };\n\n  sortUsers() {\n    this.getUsers();\n    this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\n  }\n\n  handlePagination = activePage => this.setState({ activePage }, () => this.sortUsers());\n\n  getUsers = () => {\n    const { activePage, itemsPerPage, sort, order } = this.state;\n    this.props.getUsers(activePage - 1, itemsPerPage, `${sort},${order}`);\n  };\n\n  toggleActive = user => () => {\n    this.props.updateUser({\n      ...user,\n      activated: !user.activated\n    });\n  };\n\n  render() {\n    const { users, account, match, totalItems } = this.props;\n    return (\n      <div>\n        <h2 id=\"user-management-page-heading\">\n          <Translate contentKey=\"userManagement.home.title\">Users</Translate>\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\n            <FontAwesomeIcon icon=\"plus\" /> <Translate contentKey=\"userManagement.home.createLabel\">Create a new user</Translate>\n          </Link>\n        </h2>\n        <Table responsive striped>\n          <thead>\n            <tr>\n              <th className=\"hand\" onClick={this.sort('id')}>\n                <Translate contentKey=\"global.field.id\">ID</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th className=\"hand\" onClick={this.sort('login')}>\n                <Translate contentKey=\"userManagement.login\">Login</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th className=\"hand\" onClick={this.sort('email')}>\n                <Translate contentKey=\"userManagement.email\">Email</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th />\n              <th className=\"hand\" onClick={this.sort('langKey')}>\n                <Translate contentKey=\"userManagement.langKey\">Lang Key</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th>\n                <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\n              </th>\n              <th className=\"hand\" onClick={this.sort('createdDate')}>\n                <Translate contentKey=\"userManagement.createdDate\">Created Date</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th className=\"hand\" onClick={this.sort('lastModifiedBy')}>\n                <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th id=\"modified-date-sort\" className=\"hand\" onClick={this.sort('lastModifiedDate')}>\n                <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th />\n            </tr>\n          </thead>\n          <tbody>\n            {users.map((user, i) => (\n              <tr id={user.login} key={`user-${i}`}>\n                <td>\n                  <Button tag={Link} to={`${match.url}/${user.login}`} color=\"link\" size=\"sm\">\n                    {user.id}\n                  </Button>\n                </td>\n                <td>{user.login}</td>\n                <td>{user.email}</td>\n                <td>\n                  {user.activated ? (\n                    <Button color=\"success\" onClick={this.toggleActive(user)}>\n                      Activated\n                    </Button>\n                  ) : (\n                    <Button color=\"danger\" onClick={this.toggleActive(user)}>\n                      Deactivated\n                    </Button>\n                  )}\n                </td>\n                <td>{user.langKey}</td>\n                <td>\n                  {user.authorities\n                    ? user.authorities.map((authority, j) => (\n                        <div key={`user-auth-${i}-${j}`}>\n                          <Badge color=\"info\">{authority}</Badge>\n                        </div>\n                      ))\n                    : null}\n                </td>\n                <td>\n                  <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n                </td>\n                <td>{user.lastModifiedBy}</td>\n                <td>\n                  <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n                </td>\n                <td className=\"text-right\">\n                  <div className=\"btn-group flex-btn-group-container\">\n                    <Button tag={Link} to={`${match.url}/${user.login}`} color=\"info\" size=\"sm\">\n                      <FontAwesomeIcon icon=\"eye\" />{' '}\n                      <span className=\"d-none d-md-inline\">\n                        <Translate contentKey=\"entity.action.view\">View</Translate>\n                      </span>\n                    </Button>\n                    <Button tag={Link} to={`${match.url}/${user.login}/edit`} color=\"primary\" size=\"sm\">\n                      <FontAwesomeIcon icon=\"pencil-alt\" />{' '}\n                      <span className=\"d-none d-md-inline\">\n                        <Translate contentKey=\"entity.action.edit\">Edit</Translate>\n                      </span>\n                    </Button>\n                    <Button\n                      tag={Link}\n                      to={`${match.url}/${user.login}/delete`}\n                      color=\"danger\"\n                      size=\"sm\"\n                      disabled={account.login === user.login}\n                    >\n                      <FontAwesomeIcon icon=\"trash\" />{' '}\n                      <span className=\"d-none d-md-inline\">\n                        <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n                      </span>\n                    </Button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n        <Row className=\"justify-content-center\">\n          <JhiPagination\n            items={getPaginationItemsNumber(totalItems, this.state.itemsPerPage)}\n            activePage={this.state.activePage}\n            onSelect={this.handlePagination}\n            maxButtons={5}\n          />\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  users: storeState.userManagement.users,\n  totalItems: storeState.userManagement.totalItems,\n  account: storeState.authentication.account\n});\n\nconst mapDispatchToProps = { getUsers, updateUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagement);\n"]}]}