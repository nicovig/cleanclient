{"remainingRequest":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\upload\\upload.tsx","dependencies":[{"path":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\upload\\upload.tsx","mtime":1564662993971},{"path":"C:\\jhipster\\cleanclient\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import './upload.scss';\r\nimport { createEntity, getEntity } from 'app/entities/import-fichier/import-fichier.reducer';\r\nimport React from 'react';\r\nimport { Translate } from 'react-jhipster';\r\nimport XLSX from 'xlsx';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Col, Alert, Input, Button } from 'reactstrap';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport ReactTable from 'react-table';\r\n// tslint:disable-next-line\r\nimport 'react-table/react-table.css';\r\nimport { UploadModalSheet } from './upload-modal-sheet';\r\nimport { UploadModalChooseColumn } from './upload-modal-choose-column';\r\nimport { UploadModelDownload } from './upload-model-download';\r\nimport { UploadStructureControl } from './upload-structure-control';\r\nimport moment from 'moment';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\nexport class Upload extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this._handleFileInputChange = evt => {\r\n            const f = evt.target.files[0];\r\n            this.setState({ filename: f.name });\r\n            const reader = new FileReader();\r\n            reader.onload = evt2 => {\r\n                const fr = evt2.target;\r\n                // tslint:disable-next-line\r\n                const bstr = fr.result;\r\n                const wb = XLSX.read(bstr, { type: 'binary' });\r\n                this.setState({ excelWorkbook: wb });\r\n            };\r\n            reader.readAsBinaryString(f);\r\n        };\r\n        this._clickFileInput = evt => {\r\n            const fileUpload = document.getElementById('fileUploadButton');\r\n            fileUpload.click();\r\n        };\r\n        this._chooseSheet = sheetName => {\r\n            const wb = this.state.excelWorkbook;\r\n            const sheetIndex = wb.SheetNames.findIndex(item => item === sheetName);\r\n            if (sheetIndex !== -1) {\r\n                const wsname = wb.SheetNames[sheetIndex];\r\n                const ws = wb.Sheets[wsname];\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, { defval: '' });\r\n                /* Update state */\r\n                if (data.length > 0) {\r\n                    // this.setState({ rows: data });\r\n                    const columns = Object.keys(data[0]).map(key => {\r\n                        return {\r\n                            Header: key,\r\n                            accessor: key\r\n                        };\r\n                    });\r\n                    // tslint:disable-next-line\r\n                    this.setState({ columns: columns, excelSheetsChosen: sheetName });\r\n                }\r\n                // this._cancelModal();\r\n            }\r\n            else {\r\n            }\r\n        };\r\n        this.validateColumnChoices = columnChoices => {\r\n            const wb = this.state.excelWorkbook;\r\n            const sheetIndex = wb.SheetNames.findIndex(item => item === this.state.excelSheetsChosen);\r\n            if (sheetIndex !== -1) {\r\n                const wsname = wb.SheetNames[sheetIndex];\r\n                const ws = wb.Sheets[wsname];\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, { defval: '' });\r\n                /* Update state */\r\n                if (data.length > 0) {\r\n                    const modeleData = data.map(row => {\r\n                        return {\r\n                            idexterne: columnChoices.filter(item => item.modeleColumn === 'idexterne').length > 0\r\n                                ? row[columnChoices.filter(item => item.modeleColumn === 'idexterne')[0].chosenColumn]\r\n                                : '',\r\n                            nom: columnChoices.filter(item => item.modeleColumn === 'nom').length > 0\r\n                                ? row[columnChoices.filter(item => item.modeleColumn === 'nom')[0].chosenColumn]\r\n                                : '',\r\n                            adresse: columnChoices.filter(item => item.modeleColumn === 'adresse').length > 0\r\n                                ? row[columnChoices.filter(item => item.modeleColumn === 'adresse')[0].chosenColumn]\r\n                                : '',\r\n                            codepostal: columnChoices.filter(item => item.modeleColumn === 'codepostal').length > 0\r\n                                ? row[columnChoices.filter(item => item.modeleColumn === 'codepostal')[0].chosenColumn]\r\n                                : '',\r\n                            ville: columnChoices.filter(item => item.modeleColumn === 'ville').length > 0\r\n                                ? row[columnChoices.filter(item => item.modeleColumn === 'ville')[0].chosenColumn]\r\n                                : '',\r\n                            siret: columnChoices.filter(item => item.modeleColumn === 'siret').length > 0\r\n                                ? row[columnChoices.filter(item => item.modeleColumn === 'siret')[0].chosenColumn]\r\n                                : ''\r\n                        };\r\n                    });\r\n                    this.setState({ rows: modeleData });\r\n                    const columns = Object.keys(modeleData[0]).map(key => {\r\n                        return {\r\n                            Header: key,\r\n                            accessor: key\r\n                        };\r\n                    });\r\n                    // tslint:disable-next-line\r\n                    this.setState({ columns: columns });\r\n                }\r\n                this._cancelModal();\r\n            }\r\n            else {\r\n            }\r\n        };\r\n        this._cancelModal = () => {\r\n            moment.now;\r\n            this.setState({ excelWorkbook: {}, columnList: [], excelSheetsChosen: '' });\r\n        };\r\n        this._downloadUploadModel = () => { };\r\n        this._sayFileOk = isFileOk => {\r\n            this.setState({ isFileOk: isFileOk });\r\n        };\r\n        this._onCaptchaChange = frontKey => {\r\n            this.saveEntity(frontKey);\r\n        };\r\n        this.saveEntity = frontKey => {\r\n            const { rows } = this.state;\r\n            let importLigneArray = [];\r\n            rows.forEach(element => {\r\n                const row = {\r\n                    nom: element.nom,\r\n                    adresse: element.adresse,\r\n                    cp: element.codepostal,\r\n                    ville: element.ville,\r\n                    siret: element.siret\r\n                };\r\n                importLigneArray.push(row);\r\n            });\r\n            const entity = {\r\n                dateDebut: moment(),\r\n                importLignes: importLigneArray,\r\n                frontKey: frontKey\r\n            };\r\n            this.props.createEntity(entity);\r\n        };\r\n        this.getFichierCree = () => {\r\n            const entity = {};\r\n            this.props.getEntity(entity.id);\r\n            return entity;\r\n        };\r\n        this.state = {\r\n            rows: [],\r\n            columns: [],\r\n            filename: '',\r\n            excelSheets: [],\r\n            excelWorkbook: {},\r\n            excelSheetsChosen: '',\r\n            isFileOk: false,\r\n            columnList: []\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.props.getSession();\r\n        document.title = 'Importez vos donnÃ©es clients';\r\n    }\r\n    componentWillUpdate(nextProps) {\r\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n            this.props.history.push('/entity/import-fichier/' + nextProps.importFichierEntity.hash);\r\n        }\r\n    }\r\n    render() {\r\n        const nbLignes = this.state.rows.length;\r\n        const rows = this.state.rows.filter((item, index) => index < 300);\r\n        const { columns } = this.state;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, null,\r\n                React.createElement(Col, { md: \"12\" },\r\n                    React.createElement(\"h2\", { className: \"text-center\" },\r\n                        React.createElement(Translate, { contentKey: \"upload.title\" }, \"Import your B to B Customers excel file\"))),\r\n                React.createElement(Col, { md: { size: 6, offset: 3 } },\r\n                    React.createElement(Alert, { color: \"warning\" },\r\n                        React.createElement(Translate, { contentKey: \"upload.warning\" }, \"Import your B to B Customers excel file\"),\r\n                        React.createElement(UploadModelDownload, null))),\r\n                React.createElement(Col, { md: { size: 6, offset: 3 } },\r\n                    React.createElement(Alert, { color: \"success\" },\r\n                        React.createElement(Translate, { contentKey: \"upload.advice\" }, \"Import your B to B Customers excel file\")))),\r\n            React.createElement(Row, { className: \"text-center\" },\r\n                React.createElement(Col, null,\r\n                    React.createElement(Input, { type: \"file\", accept: \".xlsx, .xls, .csv\", name: \"fileUploadButton\", id: \"fileUploadButton\", placeholder: \"with a placeholder\", onChange: this._handleFileInputChange, \r\n                        // tslint:disable-next-line\r\n                        onClick: event => {\r\n                            event.target.value = null;\r\n                        } }),\r\n                    React.createElement(Button, { color: \"primary\", onClick: this._clickFileInput }, rows.length === 0 ? (React.createElement(Translate, { contentKey: \"upload.buttonLabel\" }, \"Import your B to B Customers excel file\")) : (React.createElement(Translate, { contentKey: \"upload.buttonModifyLabel\" }, \"Import your B to B Customers excel file\"))),\r\n                    React.createElement(UploadModalSheet, { cancelModal: this._cancelModal, excelWorkbook: this.state.excelWorkbook, chooseSheet: this._chooseSheet, excelSheetsChosen: this.state.excelSheetsChosen }),\r\n                    this.state.excelSheetsChosen !== '' && (React.createElement(UploadModalChooseColumn, { validateColumnChoices: this.validateColumnChoices, cancelModal: this._cancelModal, excelWorkbook: this.state.excelWorkbook, columnChoices: this.state.columns, excelSheetsChosen: this.state.excelSheetsChosen })))),\r\n            rows.length > 0 && (React.createElement(Row, { className: \"upload-preview\" },\r\n                React.createElement(Col, { md: \"12\" },\r\n                    React.createElement(\"h2\", { className: \"text-center\" },\r\n                        React.createElement(Translate, { contentKey: \"upload.preview\" }, \"Preview\"),\r\n                        this.state.filename)),\r\n                React.createElement(Col, { md: { size: 4, offset: 4 } }, this.state.isFileOk && (React.createElement(Alert, { className: \"clearfix\", color: \"success\" },\r\n                    React.createElement(Translate, { contentKey: \"upload.file-is-ok\" }, \"Import your B to B Customers excel file\"),\r\n                    React.createElement(Col, { md: { size: 4, offset: 2 } },\r\n                        React.createElement(ReCAPTCHA, { sitekey: \"6LeTWKsUAAAAAHD97Pwcn1IclpqfMuvq_NDchnWb\", onChange: this._onCaptchaChange }))))),\r\n                React.createElement(Col, { md: { size: 6, offset: 3 } },\r\n                    React.createElement(UploadStructureControl, { columns: columns.map(item => item.accessor), sayFileOk: this._sayFileOk, isFileOk: this.state.isFileOk })),\r\n                nbLignes > 300 && (React.createElement(Alert, { color: \"warning\" }, \" Seulement les 300 premi\\u00E8res lignes de votre fichier sont affich\\u00E9es pour pr\\u00E9visualisation\")),\r\n                React.createElement(Col, { md: \"12\" },\r\n                    React.createElement(ReactTable, { showPagination: false, data: rows, columns: columns, style: {\r\n                            height: Math.min(40 + rows.length * 40, 400) + 'px'\r\n                        }, pageSize: rows.length }))))));\r\n    }\r\n}\r\nconst mapStateToProps = storeState => ({\r\n    account: storeState.authentication.account,\r\n    isAuthenticated: storeState.authentication.isAuthenticated,\r\n    importFichierEntity: storeState.importFichier.entity,\r\n    updateSuccess: storeState.importFichier.updateSuccess\r\n});\r\nconst mapDispatchToProps = { getSession, createEntity, getEntity };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Upload);\r\n",{"version":3,"file":"C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\upload\\upload.tsx","sourceRoot":"","sources":["C:\\jhipster\\cleanclient\\node_modules\\tslint-loader\\index.js!C:\\jhipster\\cleanclient\\src\\main\\webapp\\app\\modules\\upload\\upload.tsx"],"names":[],"mappings":"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","sourcesContent":["import './upload.scss';\r\nimport { IImportFichier } from 'app/shared/model/import-fichier.model';\r\nimport { IImportLigne } from 'app/shared/model/import-ligne.model';\r\nimport { createEntity, getEntity } from 'app/entities/import-fichier/import-fichier.reducer';\r\nimport React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Translate } from 'react-jhipster';\r\nimport XLSX from 'xlsx';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Col, Alert, Input, Button } from 'reactstrap';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport ReactTable from 'react-table';\r\n// tslint:disable-next-line\r\nimport 'react-table/react-table.css';\r\nimport { UploadModalSheet } from './upload-modal-sheet';\r\nimport { UploadModalChooseColumn } from './upload-modal-choose-column';\r\nimport { UploadModelDownload } from './upload-model-download';\r\nimport { UploadStructureControl } from './upload-structure-control';\r\nimport moment from 'moment';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\n\r\nexport interface IUploadProp extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\r\n\r\nexport interface IUploadState {\r\n  rows: any[];\r\n  columns: Array<{ Header: string; accessor: string }>;\r\n  filename: '';\r\n  excelSheets: String[];\r\n  excelWorkbook: any;\r\n  excelSheetsChosen: '';\r\n  isFileOk: boolean;\r\n  columnList: String[];\r\n}\r\n\r\nexport class Upload extends React.Component<IUploadProp, IUploadState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rows: [],\r\n      columns: [],\r\n      filename: '',\r\n      excelSheets: [],\r\n      excelWorkbook: {},\r\n      excelSheetsChosen: '',\r\n      isFileOk: false,\r\n      columnList: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getSession();\r\n    document.title = 'Importez vos donnÃ©es clients';\r\n  }\r\n\r\n  componentWillUpdate(nextProps) {\r\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n      this.props.history.push('/entity/import-fichier/' + nextProps.importFichierEntity.hash);\r\n    }\r\n  }\r\n\r\n  _handleFileInputChange = evt => {\r\n    const f = evt.target.files[0];\r\n\r\n    this.setState({ filename: f.name });\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = evt2 => {\r\n      const fr = evt2.target as FileReader;\r\n      // tslint:disable-next-line\r\n      const bstr = fr.result;\r\n      const wb = XLSX.read(bstr, { type: 'binary' });\r\n      this.setState({ excelWorkbook: wb });\r\n    };\r\n    reader.readAsBinaryString(f);\r\n  };\r\n\r\n  _clickFileInput = evt => {\r\n    const fileUpload = document.getElementById('fileUploadButton');\r\n    fileUpload.click();\r\n  };\r\n\r\n  _chooseSheet = sheetName => {\r\n    const wb = this.state.excelWorkbook;\r\n    const sheetIndex = wb.SheetNames.findIndex(item => item === sheetName);\r\n    if (sheetIndex !== -1) {\r\n      const wsname = wb.SheetNames[sheetIndex];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      const data = XLSX.utils.sheet_to_json(ws, { defval: '' });\r\n      /* Update state */\r\n      if (data.length > 0) {\r\n        // this.setState({ rows: data });\r\n        const columns = Object.keys(data[0]).map(key => {\r\n          return {\r\n            Header: key,\r\n            accessor: key\r\n          };\r\n        });\r\n        // tslint:disable-next-line\r\n        this.setState({ columns: columns, excelSheetsChosen: sheetName });\r\n      }\r\n      // this._cancelModal();\r\n    } else {\r\n    }\r\n  };\r\n\r\n  validateColumnChoices = columnChoices => {\r\n    const wb = this.state.excelWorkbook;\r\n    const sheetIndex = wb.SheetNames.findIndex(item => item === this.state.excelSheetsChosen);\r\n    if (sheetIndex !== -1) {\r\n      const wsname = wb.SheetNames[sheetIndex];\r\n      const ws = wb.Sheets[wsname];\r\n\r\n      /* Convert array of arrays */\r\n      const data = XLSX.utils.sheet_to_json(ws, { defval: '' });\r\n      /* Update state */\r\n      if (data.length > 0) {\r\n        const modeleData = data.map(row => {\r\n          return {\r\n            idexterne:\r\n              columnChoices.filter(item => item.modeleColumn === 'idexterne').length > 0\r\n                ? row[columnChoices.filter(item => item.modeleColumn === 'idexterne')[0].chosenColumn]\r\n                : '',\r\n            nom:\r\n              columnChoices.filter(item => item.modeleColumn === 'nom').length > 0\r\n                ? row[columnChoices.filter(item => item.modeleColumn === 'nom')[0].chosenColumn]\r\n                : '',\r\n            adresse:\r\n              columnChoices.filter(item => item.modeleColumn === 'adresse').length > 0\r\n                ? row[columnChoices.filter(item => item.modeleColumn === 'adresse')[0].chosenColumn]\r\n                : '',\r\n            codepostal:\r\n              columnChoices.filter(item => item.modeleColumn === 'codepostal').length > 0\r\n                ? row[columnChoices.filter(item => item.modeleColumn === 'codepostal')[0].chosenColumn]\r\n                : '',\r\n            ville:\r\n              columnChoices.filter(item => item.modeleColumn === 'ville').length > 0\r\n                ? row[columnChoices.filter(item => item.modeleColumn === 'ville')[0].chosenColumn]\r\n                : '',\r\n            siret:\r\n              columnChoices.filter(item => item.modeleColumn === 'siret').length > 0\r\n                ? row[columnChoices.filter(item => item.modeleColumn === 'siret')[0].chosenColumn]\r\n                : ''\r\n          };\r\n        });\r\n        this.setState({ rows: modeleData });\r\n\r\n        const columns = Object.keys(modeleData[0]).map(key => {\r\n          return {\r\n            Header: key,\r\n            accessor: key\r\n          };\r\n        });\r\n        // tslint:disable-next-line\r\n        this.setState({ columns: columns });\r\n      }\r\n\r\n      this._cancelModal();\r\n    } else {\r\n    }\r\n  };\r\n\r\n  _cancelModal = () => {\r\n    moment.now;\r\n    this.setState({ excelWorkbook: {}, columnList: [], excelSheetsChosen: '' });\r\n  };\r\n\r\n  _downloadUploadModel = () => {};\r\n\r\n  _sayFileOk = isFileOk => {\r\n    this.setState({ isFileOk: isFileOk });\r\n  };\r\n\r\n  _onCaptchaChange = frontKey => {\r\n    this.saveEntity(frontKey);\r\n  };\r\n\r\n  saveEntity = frontKey => {\r\n    const { rows } = this.state;\r\n    let importLigneArray: IImportLigne[] = [];\r\n\r\n    rows.forEach(element => {\r\n      const row: IImportLigne = {\r\n        nom: element.nom,\r\n        adresse: element.adresse,\r\n        cp: element.codepostal,\r\n        ville: element.ville,\r\n        siret: element.siret\r\n      };\r\n      importLigneArray.push(row);\r\n    });\r\n\r\n    const entity: IImportFichier = {\r\n      dateDebut: moment(),\r\n      importLignes: importLigneArray,\r\n      frontKey: frontKey\r\n    };\r\n\r\n    this.props.createEntity(entity);\r\n  };\r\n\r\n  getFichierCree = () => {\r\n    const entity: IImportFichier = {};\r\n\r\n    this.props.getEntity(entity.id);\r\n\r\n    return entity;\r\n  };\r\n\r\n  render() {\r\n    const nbLignes = this.state.rows.length;\r\n    const rows = this.state.rows.filter((item, index) => index < 300);\r\n    const { columns } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col md=\"12\">\r\n            <h2 className=\"text-center\">\r\n              <Translate contentKey=\"upload.title\">Import your B to B Customers excel file</Translate>\r\n            </h2>\r\n          </Col>\r\n          <Col md={{ size: 6, offset: 3 }}>\r\n            <Alert color=\"warning\">\r\n              <Translate contentKey=\"upload.warning\">Import your B to B Customers excel file</Translate>\r\n              <UploadModelDownload />\r\n            </Alert>\r\n          </Col>\r\n          <Col md={{ size: 6, offset: 3 }}>\r\n            <Alert color=\"success\">\r\n              <Translate contentKey=\"upload.advice\">Import your B to B Customers excel file</Translate>\r\n            </Alert>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"text-center\">\r\n          <Col>\r\n            <Input\r\n              type=\"file\"\r\n              accept=\".xlsx, .xls, .csv\"\r\n              name=\"fileUploadButton\"\r\n              id=\"fileUploadButton\"\r\n              placeholder=\"with a placeholder\"\r\n              onChange={this._handleFileInputChange}\r\n              // tslint:disable-next-line\r\n              onClick={event => {\r\n                event.target.value = null;\r\n              }}\r\n            />\r\n            <Button color=\"primary\" onClick={this._clickFileInput}>\r\n              {rows.length === 0 ? (\r\n                <Translate contentKey=\"upload.buttonLabel\">Import your B to B Customers excel file</Translate>\r\n              ) : (\r\n                <Translate contentKey=\"upload.buttonModifyLabel\">Import your B to B Customers excel file</Translate>\r\n              )}\r\n            </Button>\r\n            <UploadModalSheet\r\n              cancelModal={this._cancelModal}\r\n              excelWorkbook={this.state.excelWorkbook}\r\n              chooseSheet={this._chooseSheet}\r\n              excelSheetsChosen={this.state.excelSheetsChosen}\r\n            />\r\n            {this.state.excelSheetsChosen !== '' && (\r\n              <UploadModalChooseColumn\r\n                validateColumnChoices={this.validateColumnChoices}\r\n                cancelModal={this._cancelModal}\r\n                excelWorkbook={this.state.excelWorkbook}\r\n                columnChoices={this.state.columns}\r\n                excelSheetsChosen={this.state.excelSheetsChosen}\r\n              />\r\n            )}\r\n          </Col>\r\n        </Row>\r\n        {rows.length > 0 && (\r\n          <Row className=\"upload-preview\">\r\n            <Col md=\"12\">\r\n              <h2 className=\"text-center\">\r\n                <Translate contentKey=\"upload.preview\">Preview</Translate>\r\n                {this.state.filename}\r\n              </h2>\r\n            </Col>\r\n            <Col md={{ size: 4, offset: 4 }}>\r\n              {this.state.isFileOk && (\r\n                <Alert className=\"clearfix\" color=\"success\">\r\n                  <Translate contentKey=\"upload.file-is-ok\">Import your B to B Customers excel file</Translate>\r\n                  <Col md={{ size: 4, offset: 2 }}>\r\n                    <ReCAPTCHA sitekey=\"6LeTWKsUAAAAAHD97Pwcn1IclpqfMuvq_NDchnWb\" onChange={this._onCaptchaChange} />\r\n                  </Col>\r\n                </Alert>\r\n              )}\r\n            </Col>\r\n            <Col md={{ size: 6, offset: 3 }}>\r\n              <UploadStructureControl\r\n                columns={columns.map(item => item.accessor)}\r\n                sayFileOk={this._sayFileOk}\r\n                isFileOk={this.state.isFileOk}\r\n              />\r\n            </Col>\r\n            {nbLignes > 300 && (\r\n              <Alert color=\"warning\"> Seulement les 300 premiÃ¨res lignes de votre fichier sont affichÃ©es pour prÃ©visualisation</Alert>\r\n            )}\r\n            <Col md=\"12\">\r\n              <ReactTable\r\n                showPagination={false}\r\n                data={rows}\r\n                columns={columns}\r\n                style={{\r\n                  height: Math.min(40 + rows.length * 40, 400) + 'px'\r\n                }}\r\n                pageSize={rows.length}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = storeState => ({\r\n  account: storeState.authentication.account,\r\n  isAuthenticated: storeState.authentication.isAuthenticated,\r\n  importFichierEntity: storeState.importFichier.entity,\r\n  updateSuccess: storeState.importFichier.updateSuccess\r\n});\r\n\r\nconst mapDispatchToProps = { getSession, createEntity, getEntity };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Upload);\r\n"]}]}