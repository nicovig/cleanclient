{"version":3,"file":"main.4f93d88f99dba2aec28d.hot-update.js","sources":["webpack:///./src/main/webapp/app/entities/import-fichier/import-fichier-result.tsx"],"sourcesContent":["import './import-fichier-detail.scss';\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Container, Col, Card, Button, CardTitle, CardText, Row } from 'reactstrap';\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getSampleResult, getEntity } from './import-fichier.reducer';\r\nimport ReactTable from 'react-table';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearchDollar, faThumbsUp, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons/faWindowClose';\r\nimport {ImportFichierResultMap} from './import-fichier-result-map';\r\nimport ImportFichierResultEchec from './import-fichier-result-echec';\r\nimport { IImportLigne } from 'app/shared/model/import-ligne.model';\r\n\r\nexport interface IImportFichierResultProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\r\n\r\nexport interface IImportFichierResultState {\r\n  rows: any[];\r\n  columns: Array<{ Header: string; accessor: string }>;\r\n  \r\n}\r\n\r\nexport class ImportFichierResult extends React.Component<IImportFichierResultProps, IImportFichierResultState> {\r\n  hash;\r\n  componentDidMount() {\r\n    this.props.getSampleResult(this.props.match.params.id);\r\n  }\r\n\r\n\r\n  _goToExport() {\r\n    this.props.history.push('/billing/' + this.props.match.params.id);\r\n  }\r\n\r\n  formatTable() {\r\n    const { result } = this.props;\r\n    if (result && result.echantillonClients && result.echantillonClients.length > 0) {\r\n      const echantillon = result.echantillonClients.map(item => {\r\n        return {\r\n          Nom: item.sireneDenomination,\r\n          Numéro: item.sireneHousenumber,\r\n          Rue: item.sireneStreet,\r\n          CP: item.sireneCodepostal,\r\n          Ville: item.sireneVille,\r\n          SIRET: item.sireneSiret,\r\n          Lattitude: item.sireneLatitude,\r\n          Longitude: item.sireneLongitude\r\n        };\r\n      });\r\n\r\n      /*React Table*/\r\n      const columns = Object.keys(echantillon[0]).map(key => {\r\n        return {\r\n          Header: key,\r\n          accessor: key\r\n        };\r\n      });\r\n      return {\r\n        rows: echantillon,\r\n        columns\r\n      };\r\n    } else {\r\n      return {\r\n        rows: [],\r\n        columns: []\r\n      };\r\n    }\r\n  }\r\n\r\n  formatTableEchecs() {\r\n    const { result } = this.props;\r\n    \r\n    if (result && result.echecs && result.echecs.length > 0) {\r\n\r\n      console.log(result.echecs);\r\n      const echecs = result.echecs.map(item => {\r\n        if (item.nom == \"\"){\r\n          item.nom = \"-donnée manquante-\";\r\n        }\r\n        if (item.adresse == \"\"){\r\n          item.adresse = \"-donnée manquante-\";\r\n        }\r\n        if (item.cp == \"\"){\r\n          item.cp = \"-donnée manquante-\";\r\n        }\r\n        if (item.ville == \"\"){\r\n          item.ville = \"-donnée manquante-\";\r\n        }\r\n        if (item.siret == \"\"){\r\n          item.siret = \"-donnée manquante-\";\r\n        }\r\n        return {\r\n          Nom: item.nom,\r\n          Adresse: item.adresse,\r\n          CP: item.cp,\r\n          Ville: item.ville,\r\n          SIRET: item.siret\r\n        };\r\n      });\r\n      /*React Table*/\r\n      const columnsEchecs = Object.keys(echecs[0]).map(key => {\r\n        return {\r\n          Header: key,\r\n          accessor: key,\r\n          Cell: (cellInfo) => {\r\n            return (\r\n              <div\r\n                style={{ backgroundColor: \"#fafafa\" }}\r\n                contentEditable\r\n                suppressContentEditableWarning\r\n                onBlur={e => {\r\n                  const data = [...echecs];\r\n                        data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n                        //ex: this.setState({ data });\r\n                        this.saveEntity();\r\n\r\n                              }\r\n                }\r\n                dangerouslySetInnerHTML={{\r\n                  __html: echecs[cellInfo.index] ? echecs[cellInfo.index][cellInfo.column.id] : ''\r\n                }}\r\n              />\r\n            );\r\n          }\r\n        };\r\n      });\r\n      return {\r\n        rowsEchecs: echecs,\r\n        columnsEchecs\r\n      };\r\n    } else {\r\n      return {\r\n        rowsEchecs: [],\r\n        columnsEchecs: []\r\n      };\r\n    }\r\n  }\r\n\r\n  getImportFichier = () => {\r\n    \r\n    this.props.getEntity()\r\n\r\n  }\r\n\r\n  saveEntity = () => {\r\n    const { rows } = this.state;\r\n    let importLigneArray: IImportLigne[] = [];\r\n\r\n    rows.forEach(element => {\r\n      const row: IImportLigne = {\r\n        nom: element.nom,\r\n        adresse: element.adresse,\r\n        cp: element.codepostal,\r\n        ville: element.ville,\r\n        siret: element.siret\r\n      };\r\n      importLigneArray.push(row);\r\n    });\r\n\r\n    const entity: IImportFichier = {\r\n      dateDebut: moment(),\r\n      importLignes: importLigneArray,\r\n      frontKey: frontKey\r\n    };\r\n    this.props.createEntity(entity);\r\n  };\r\n\r\n  handleUpload = () => {\r\n    this.props.history.push('/upload');\r\n  };\r\n\r\n  render() {\r\n    const { result } = this.props;\r\n    const { rows, columns } = this.formatTable();\r\n    const { rowsEchecs, columnsEchecs } = this.formatTableEchecs();\r\n    return (\r\n      <Container>\r\n        <div className=\"text-container\">\r\n          <div className=\"text-animation\">\r\n            <span>Résultat du traitement</span>\r\n          </div>\r\n        </div>\r\n        <Row>\r\n          <Col sm=\"4\">\r\n            <Card body>\r\n              <FontAwesomeIcon icon={faThumbsUp} size=\"5x\" color=\"#dfda01\" className=\"icon\" pull=\"left\" />\r\n              <p />\r\n              <CardTitle className=\"cardsTitle\">\r\n                {result.localisationClients ? result.localisationClients.length : ''} Clients rapprochés\r\n              </CardTitle>\r\n              {result.nombreEtablissementFermes && result.nombreEtablissementFermes > 0 && (\r\n                <CardText className=\"cardsTextDemenage\">dont {result.nombreEtablissementFermes} établissements ont fermé</CardText>\r\n              )}\r\n              <AnchorLink className=\"anchorButton\" href=\"#clean\">\r\n                Exporter le fichier\r\n              </AnchorLink>\r\n            </Card>\r\n          </Col>\r\n          <Col sm=\"4\">\r\n            <Card body>\r\n              <FontAwesomeIcon icon={faSearchDollar} size=\"5x\" color=\"#dfda01\" className=\"icon\" pull=\"left\" />\r\n              <p />\r\n              <CardTitle className=\"cardsTitle\">\r\n                {result.localisationProspects ? result.localisationProspects.length : ''} Prospects trouvés\r\n              </CardTitle>\r\n              <CardText>Sur la carte sont affichés des prospects intéressants, en fonction de vos clients existants.</CardText>\r\n              <AnchorLink href=\"#map\" className=\"anchorButton\">\r\n                Où sont mes prospects ?\r\n              </AnchorLink>\r\n            </Card>\r\n          </Col>\r\n          <Col sm=\"4\">\r\n            <Card body>\r\n              <FontAwesomeIcon icon={faEyeSlash} size=\"5x\" color=\"#dfda01\" className=\"icon\" pull=\"left\" />\r\n              <p />\r\n              <CardTitle className=\"cardsTitle\">{result.echecs ? result.echecs.length : ''} Clients non-rapprochés</CardTitle>\r\n              <CardText>\r\n                Nous n'avons pas pû trouver tous vos clients. Pour un traitement optimal, vous pouvez remplir manuellement certains champs\r\n                et refaire un import.\r\n              </CardText>\r\n              <AnchorLink href=\"#unclean\" className=\"anchorButton\">\r\n                Voir les entreprises non-rapprochées\r\n              </AnchorLink>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <div id=\"clean\" />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <Col md=\"12\">\r\n          <div className=\"etatTotal\">Échantillon du fichier nettoyé</div>\r\n          <ReactTable\r\n            showPagination={false}\r\n            data={rows}\r\n            columns={columns}\r\n            sortable={false}\r\n            style={{\r\n              width: '67.5rem'\r\n            }}\r\n            pageSize={rows.length}\r\n            getTrProps={(state, rowInfo, column) => {\r\n              return {\r\n                style: {\r\n                  opacity: rowInfo.index < 3 ? 1 : rowInfo.index === 3 ? 0.45 : 0.1\r\n                }\r\n              };\r\n            }}\r\n          />\r\n          <br />\r\n          <Row>\r\n            <Col sm=\"4\" />\r\n            <Col sm=\"4\">\r\n              <Button onClick={() => this._goToExport()} className=\"float-none\">\r\n                Importer le fichier nettoyé\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"4\" />\r\n          </Row>\r\n        </Col>\r\n        <br />\r\n        <div id=\"map\" />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <Col md=\"12\">\r\n          <div className=\"etatTotal\">Cartographie de mes clients</div>\r\n          <ImportFichierResultMap result={this.props.result} />\r\n            </Col>\r\n        <br />\r\n        <br />\r\n        <Col md=\"12\">\r\n          <div className=\"etatTotal\">Clients non rapprochés</div>\r\n          <ImportFichierResultEchec data={rowsEchecs} columns={columnsEchecs} /> \r\n          <Row>\r\n            <Col sm=\"4\" />\r\n            <Col sm=\"4\">\r\n              <Button className=\"float-none\" onClick={this.handleUpload}>\r\n                Refaire un nettoyage des données\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"4\" />\r\n          </Row>\r\n        </Col>\r\n        <br />\r\n        <div />\r\n        <br />\r\n        <br />\r\n        <br />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ importFichier }: IRootState) => ({\r\n  result: importFichier.result,\r\n  importFichier : importFichier.entity\r\n\r\n});\r\n\r\nconst mapDispatchToProps = { getSampleResult, getEntity };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ImportFichierResult);\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAWA;AAAA;;AAmHA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA4HA;AA5QA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAmCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;;;;;A","sourceRoot":""}